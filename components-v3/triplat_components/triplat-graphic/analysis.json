{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "A plugin to enable selections on a graphic. It should be used as an inner element of triplat-graphic.\n\n\t<triplat-graphic record-id=\"15294509\">\n\n\t  <triplat-graphic-selectable\n\t\t  slot=\"graphic-selectable\"\n\t\t  selectable=\"{{floor.floorSpaces}}\"\n\t\t  selected=\"{{selected}}\"\n\t\t  multi>\n\t  </triplat-graphic-selectable>\n\n\t</triplat-graphic>\n\n# Styling\n\nStyle the selected/selectable/non-selectable shapes using mixins on the triplat-graphic element. \n\nExample:\n\t\n\t triplat-graphic {\n\t\t  --triplat-graphic-selected: {\n\t\t\t   fill: #5AAAFA;\n\t\t\t   fill-opacity: 1;\n\t\t  };\n\t\t  --triplat-graphic-selectable: {\n\t\t\t   fill: #C7C7C7;\n\t\t\t   fill-opacity: 1;\n\t\t\t   cursor: pointer;\n\t\t  };\n\t\t  --triplat-graphic-non-selectable: {\n\t\t\t   fill: white;\n\t\t\t   fill-opacity: 1;\n\t\t  }\n\t }\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--triplat-graphic-selected`               | Mixin for shapes that are selected                          | `{}`\n`--triplat-graphic-interactive-selected`   | Mixin for interactive(top layer) shapes that are selected   | `{}`\n`--triplat-graphic-selectable`             | Mixin for shapes that are selectable                        | `{}`\n`--triplat-graphic-interactive-selectable` | Mixin for interactive(top layer) shapes that are selectable | `{}`\n`--triplat-graphic-non-selectable`         | Mixin for shapes that are attached, but not selectable      | `{}`",
      "summary": "",
      "path": "triplat-graphic-selectable.js",
      "properties": [
        {
          "name": "selectable",
          "type": "Array | null | undefined",
          "description": "An array of shapes that can be selected by the user.\n\nThe SVG document generated will add the attached ID to the spaces.\nThis selected array must contain a value of _id that matches the\nattached ID.",
          "privacy": "public",
          "sourceRange": {
            "file": "triplat-graphic-selectable-behavior.js",
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 25,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "observer": "\"_handleSelectableChanged\"",
              "readOnly": false,
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "TriplatGraphicSelectableBehavior"
        },
        {
          "name": "_selectableById",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-graphic-selectable-behavior.js",
            "start": {
              "line": 27,
              "column": 2
            },
            "end": {
              "line": 31,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "TriplatGraphicSelectableBehavior"
        },
        {
          "name": "graphic",
          "type": "Object | null | undefined",
          "description": "The graphic on which the selectable shapes will perform actions against.\n\nUsually, this is automatically set by triplat-graphic.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 2
            },
            "end": {
              "line": 76,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "selected",
          "type": "Object | null | undefined",
          "description": "If the multi option is not present, this will give access to the\nselected record.\n\nIf the multi option is present, this will give access to an array\nof selected records.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 89,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": false,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "multi",
          "type": "boolean | null | undefined",
          "description": "A flag to enable multi select of shapes. If this is omitted it will be\nsingle select.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "selectableLoaded",
          "type": "boolean | null | undefined",
          "description": "A flag that will indicate if the selectable spaces are loaded.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 2
            },
            "end": {
              "line": 109,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "enabled",
          "type": "boolean | null | undefined",
          "description": "A flag to enable this plugin. If this is omitted it will be\ntrue and the plugin will be enabled.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_enabledChanged\"",
              "readOnly": false,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "keepSelectableStyle",
          "type": "boolean | null | undefined",
          "description": "A flag to indicate the selectable styles will be\nmaintained even though this plugin is disabled",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 2
            },
            "end": {
              "line": 129,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_svgLoaded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 2
            },
            "end": {
              "line": 135,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "_handleSelectableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-graphic-selectable-behavior.js",
            "start": {
              "line": 34,
              "column": 1
            },
            "end": {
              "line": 44,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selectable"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TriplatGraphicSelectableBehavior"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 4
            },
            "end": {
              "line": 149,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_initializeGraphic",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 4
            },
            "end": {
              "line": 153,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "graphic"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleSelectableByIdChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 177,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_selectableById"
            },
            {
              "name": "svgLoaded"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_initializeSelected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 4
            },
            "end": {
              "line": 194,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected"
            },
            {
              "name": "svgLoaded"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_initializeSingleSelected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 4
            },
            "end": {
              "line": 198,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_initializeMultiSelected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 4
            },
            "end": {
              "line": 202,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selectSingle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 4
            },
            "end": {
              "line": 209,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selectMulti",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 4
            },
            "end": {
              "line": 239,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "handleTap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 1
            },
            "end": {
              "line": 254,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleTapByRecordId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 281,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "recordId"
            },
            {
              "name": "boundingIndex"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleSvgLoadedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 4
            },
            "end": {
              "line": 285,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_enabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 300,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 54,
          "column": 8
        },
        "end": {
          "line": 301,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "selectable",
          "description": "An array of shapes that can be selected by the user.\n\nThe SVG document generated will add the attached ID to the spaces.\nThis selected array must contain a value of _id that matches the\nattached ID.",
          "sourceRange": {
            "file": "triplat-graphic-selectable-behavior.js",
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 25,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "TriplatGraphicSelectableBehavior"
        },
        {
          "name": "graphic",
          "description": "The graphic on which the selectable shapes will perform actions against.\n\nUsually, this is automatically set by triplat-graphic.",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 2
            },
            "end": {
              "line": 76,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "selected",
          "description": "If the multi option is not present, this will give access to the\nselected record.\n\nIf the multi option is present, this will give access to an array\nof selected records.",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 89,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "multi",
          "description": "A flag to enable multi select of shapes. If this is omitted it will be\nsingle select.",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "selectable-loaded",
          "description": "A flag that will indicate if the selectable spaces are loaded.",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 2
            },
            "end": {
              "line": 109,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "enabled",
          "description": "A flag to enable this plugin. If this is omitted it will be\ntrue and the plugin will be enabled.",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "keep-selectable-style",
          "description": "A flag to indicate the selectable styles will be\nmaintained even though this plugin is disabled",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 2
            },
            "end": {
              "line": 129,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "selected-changed",
          "description": "Fired when the `selected` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selectable-loaded-changed",
          "description": "Fired when the `selectableLoaded` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-graphic-selectable"
    },
    {
      "description": "A plugin to enable pan and zoom for a graphic. It should be used as an inner element of triplat-graphic.\n\n\t<triplat-graphic record-id=\"15294509\">\n\t\t\t<triplat-graphic-zoomable slot=\"graphic-zoomable\"></triplat-graphic-zoomable>\n\t</triplat-graphic>",
      "summary": "",
      "path": "triplat-graphic-zoomable.js",
      "properties": [
        {
          "name": "graphic",
          "type": "Object | null | undefined",
          "description": "The graphic on which the zoomable will perform actions against.\n\nUsually, this is automatically set by triplat-graphic",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_graphicChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "enabled",
          "type": "boolean | null | undefined",
          "description": "A flag to enable this plugin. If this is omitted it will be\ntrue and the plugin will be enabled.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": false,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "cached",
          "type": "boolean | null | undefined",
          "description": "A flag to enable the caching of pan and zoom. If this is omitted, it will be\nfalse and the pan and zoom will not be persisted when switching between different graphics\nor when the graphic is reloaded. When cached is on, the last pan and zoom location will be preserved\nuntil either this property is turned off or the component is detached.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 62,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_cachedChanged\"",
              "readOnly": false,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "scale",
          "type": "number | null | undefined",
          "description": "Gets or sets the zoom factor for this graphic.\nBy increasing this number, the graphic will be zoomed out, while the decrease will zoom in.\nIt accepts a value between 0.01 and 1.5.\nWhen the graphic is first loaded the scale will have the value 1.0.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 2
            },
            "end": {
              "line": 75,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_handleScaleChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "_cacheViewPortMap",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "_svgLoaded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 86,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_mouseWheelModifier",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{\"0\":0.0002,\"1\":0.008}"
        },
        {
          "name": "_lastScale",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        }
      ],
      "methods": [
        {
          "name": "_initializeGraphic",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "graphic"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleSvgLoadedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 4
            },
            "end": {
              "line": 114,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_graphicChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 4
            },
            "end": {
              "line": 118,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleEnabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 130,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_cachedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleTrackZoomPlugin",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 171,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleTouchStart",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 4
            },
            "end": {
              "line": 184,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleTouchMove",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 4
            },
            "end": {
              "line": 194,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handlePointerMove",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 4
            },
            "end": {
              "line": 213,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleTouchEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 4
            },
            "end": {
              "line": 217,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleMouseWheel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 4
            },
            "end": {
              "line": 227,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleZoom",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 4
            },
            "end": {
              "line": 252,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newScale"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleScaleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 4
            },
            "end": {
              "line": 262,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newScale"
            },
            {
              "name": "oldScale"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handlePointerDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 264,
              "column": 4
            },
            "end": {
              "line": 292,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handlePointerUp",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 4
            },
            "end": {
              "line": 307,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getMultiTouchDistance",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 4
            },
            "end": {
              "line": 312,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_getLineDistance",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 314,
              "column": 4
            },
            "end": {
              "line": 318,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "x1"
            },
            {
              "name": "y1"
            },
            {
              "name": "x2"
            },
            {
              "name": "y2"
            }
          ]
        },
        {
          "name": "_getNormalizedPoint",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 320,
              "column": 4
            },
            "end": {
              "line": 329,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "matrix"
            }
          ]
        },
        {
          "name": "enable",
          "description": "Calling this method will enable this plugin",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 334,
              "column": 1
            },
            "end": {
              "line": 336,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disable",
          "description": "Calling this method will disable this plugin",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 341,
              "column": 1
            },
            "end": {
              "line": 343,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleEnable",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 345,
              "column": 4
            },
            "end": {
              "line": 357,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleDisable",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 371,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearCacheViewPortMap",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 4
            },
            "end": {
              "line": 375,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setViewPortCache",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 377,
              "column": 4
            },
            "end": {
              "line": 383,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "scale"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setCachedViewPort",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 385,
              "column": 4
            },
            "end": {
              "line": 398,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svgLoaded"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_isCached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 4
            },
            "end": {
              "line": 402,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 16,
          "column": 8
        },
        "end": {
          "line": 403,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "graphic",
          "description": "The graphic on which the zoomable will perform actions against.\n\nUsually, this is automatically set by triplat-graphic",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "enabled",
          "description": "A flag to enable this plugin. If this is omitted it will be\ntrue and the plugin will be enabled.",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "cached",
          "description": "A flag to enable the caching of pan and zoom. If this is omitted, it will be\nfalse and the pan and zoom will not be persisted when switching between different graphics\nor when the graphic is reloaded. When cached is on, the last pan and zoom location will be preserved\nuntil either this property is turned off or the component is detached.",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 62,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "scale",
          "description": "Gets or sets the zoom factor for this graphic.\nBy increasing this number, the graphic will be zoomed out, while the decrease will zoom in.\nIt accepts a value between 0.01 and 1.5.\nWhen the graphic is first loaded the scale will have the value 1.0.",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 2
            },
            "end": {
              "line": 75,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "enabled-changed",
          "description": "Fired when the `enabled` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "cached-changed",
          "description": "Fired when the `cached` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "scale-changed",
          "description": "Fired when the `scale` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-graphic-zoomable"
    },
    {
      "description": "A plugin to enable highlights on a graphic. It should be used as an inner element of triplat-graphic.\n\n\t<triplat-graphic record-id=\"15294509\">\n\n\t\t\t<triplat-graphic-highlight \n\t\t\t\t\tclass-number=\"2\"\n\t\t\t\t\thighlighted=\"{{floor.floorSpacesH1}}\"\n\t\t\t\t\tslot=\"graphic-highlight\">\n\t\t\t</triplat-graphic-highlight>\n\n\t</triplat-graphic>\n\n# Styling\n\nStyle the highlighted shapes using the --triplat-graphic-highlight- mixin on the triplat-graphic \nelement. The number of the variable corresponds to the property classNumber of the \ntriplat-graphic-highlight component.  The classNumber must be between 1 and 5 inclusive.\n\nExample:\n\t\n\ttriplat-graphic { \n\t\t --triplat-graphic-highlight-2: {\n\t\t\t  fill: #8CD211;\n\t\t\t  fill-opacity: 1;\n\t\t };\n\t}\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--triplat-graphic-highlight-1` | Mixin for shapes highlighted with class-number=\"1\" | `{}`\n`--triplat-graphic-highlight-2` | Mixin for shapes highlighted with class-number=\"2\" | `{}`\n`--triplat-graphic-highlight-3` | Mixin for shapes highlighted with class-number=\"3\" | `{}`\n`--triplat-graphic-highlight-4` | Mixin for shapes highlighted with class-number=\"4\" | `{}`\n`--triplat-graphic-highlight-5` | Mixin for shapes highlighted with class-number=\"5\" | `{}`",
      "summary": "",
      "path": "triplat-graphic-highlight.js",
      "properties": [
        {
          "name": "graphic",
          "type": "Object | null | undefined",
          "description": "The graphic on which the shapes will be highlighted.\n\nUsually, this is automatically set by triplat-graphic",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 2
            },
            "end": {
              "line": 67,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "classname",
          "type": "string | null | undefined",
          "description": "NOTE: this property is deprecated.\nA css class to be applied to the highlighted shapes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 2
            },
            "end": {
              "line": 78,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "observer": "\"_onClassnameChange\"",
              "readOnly": false,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "classNumber",
          "type": "number | null | undefined",
          "description": "The number used for styling using a mixin. See above.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 2
            },
            "end": {
              "line": 89,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "observer": "\"_onClassNumberChange\"",
              "readOnly": false,
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "highlighted",
          "type": "Object | null | undefined",
          "description": "An object containing the shapes to be highlighted.\nIt can be either an array or a single element",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "readOnly": false,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "highlightLayer",
          "type": "string | null | undefined",
          "description": "Sets the spaces layer that will be highlighted by this plugin.\nThere are two options:\n- INTERACTIVE: highlights the interactive (top) layer of the graphic.\n- ATTACHED: highlights the attached layer of the graphic.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_svgLoaded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "_initializeGraphic",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "graphic"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_changeHighlighted",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 153,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            },
            {
              "name": "svgLoaded"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_forceMicrosoftStyleUpdate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 161,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearClasses",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 176,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 4
            },
            "end": {
              "line": 183,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getClassName",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 4
            },
            "end": {
              "line": 187,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_handleSvgLoadedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 4
            },
            "end": {
              "line": 191,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onClassNumberChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 4
            },
            "end": {
              "line": 201,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "classNumber"
            },
            {
              "name": "oldClassNumber"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addHighlight",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "highlighted"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onClassnameChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 4
            },
            "end": {
              "line": 216,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 49,
          "column": 8
        },
        "end": {
          "line": 217,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "graphic",
          "description": "The graphic on which the shapes will be highlighted.\n\nUsually, this is automatically set by triplat-graphic",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 2
            },
            "end": {
              "line": 67,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "classname",
          "description": "NOTE: this property is deprecated.\nA css class to be applied to the highlighted shapes.",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 2
            },
            "end": {
              "line": 78,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "class-number",
          "description": "The number used for styling using a mixin. See above.",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 2
            },
            "end": {
              "line": 89,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "highlighted",
          "description": "An object containing the shapes to be highlighted.\nIt can be either an array or a single element",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "highlight-layer",
          "description": "Sets the spaces layer that will be highlighted by this plugin.\nThere are two options:\n- INTERACTIVE: highlights the interactive (top) layer of the graphic.\n- ATTACHED: highlights the attached layer of the graphic.",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-graphic-highlight"
    },
    {
      "description": "A plugin to enable labels on a graphic. It should be used as an inner element of triplat-graphic.\n\n\t<triplat-graphic record-id=\"15294509\">\n\n\t  <triplat-graphic-label slot=\"graphic-label\"\n\t\t  label-id=\"{{labelId}}>\n\t  </triplat-graphic-label>\n\n\t</triplat-graphic>",
      "summary": "",
      "path": "triplat-graphic-label.js",
      "properties": [
        {
          "name": "graphic",
          "type": "Object | null | undefined",
          "description": "The graphic on which the label will be applied.\n\nUsually, this is automatically set by triplat-graphic",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 2
            },
            "end": {
              "line": 41,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "labelId",
          "type": "number | null | undefined",
          "description": "The labelId of a Label record\n\nIt can come from a query datasource with\nmodule = triGraphics and BO = triLabelStyle or\nmodule = triGraphics and BO = triLabelFilter",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_svgLoaded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 59,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "_initializeGraphic",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 70,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "graphic"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleGetLabelResponse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_changeLabelId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 4
            },
            "end": {
              "line": 107,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "labelId"
            },
            {
              "name": "svgLoaded"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleSvgLoadedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 4
            },
            "end": {
              "line": 111,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearCurrentLabels",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 121,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_refreshLabel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "refreshLabel",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "delay"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 23,
          "column": 8
        },
        "end": {
          "line": 133,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "graphic",
          "description": "The graphic on which the label will be applied.\n\nUsually, this is automatically set by triplat-graphic",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 2
            },
            "end": {
              "line": 41,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "label-id",
          "description": "The labelId of a Label record\n\nIt can come from a query datasource with\nmodule = triGraphics and BO = triLabelStyle or\nmodule = triGraphics and BO = triLabelFilter",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-graphic-label"
    },
    {
      "description": "A plugin to enable bounding selection on a graphic. It should be used as an inner element of triplat-graphic.\n\n\t<triplat-graphic record-id=\"15294509\">\n\t\t<triplat-graphic-bounding-selection \n\t\t\tselected=\"{{selected}}\" slot=\"graphic-bounding-selection\">\n\t\t</triplat-graphic-bounding-selection>\n\t</triplat-graphic>",
      "summary": "",
      "path": "triplat-graphic-bounding-selection.js",
      "properties": [
        {
          "name": "selectable",
          "type": "Array | null | undefined",
          "description": "An array of shapes that can be selected by the user.\n\nThe SVG document generated will add the attached ID to the spaces.\nThis selected array must contain a value of _id that matches the\nattached ID.",
          "privacy": "public",
          "sourceRange": {
            "file": "triplat-graphic-selectable-behavior.js",
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 25,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "observer": "\"_handleSelectableChanged\"",
              "readOnly": false,
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "TriplatGraphicSelectableBehavior"
        },
        {
          "name": "_selectableById",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-graphic-selectable-behavior.js",
            "start": {
              "line": 27,
              "column": 2
            },
            "end": {
              "line": 31,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "TriplatGraphicSelectableBehavior"
        },
        {
          "name": "graphic",
          "type": "Object | null | undefined",
          "description": "The graphic on which the shapes will be highlighted.\n\nUsually, this is automatically set by triplat-graphic",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 2
            },
            "end": {
              "line": 41,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "selected",
          "type": "Object | null | undefined",
          "description": "This will give access to an array of selected records.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 50,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": false,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "enabled",
          "type": "boolean | null | undefined",
          "description": "A flag to enable this plugin. If this is ommitted it will be\ntrue and the plugin will be enabled.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": false,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "_svgLoaded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 67,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_svgPath",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 2
            },
            "end": {
              "line": 72,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_handleSelectableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-graphic-selectable-behavior.js",
            "start": {
              "line": 34,
              "column": 1
            },
            "end": {
              "line": 44,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selectable"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TriplatGraphicSelectableBehavior"
        },
        {
          "name": "_initializeGraphic",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleEnabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 95,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleSvgLoadedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 99,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleTrackBounding",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 4
            },
            "end": {
              "line": 152,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setSvgPathAttrs",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "detail"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createSvgElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "tagName"
            }
          ]
        },
        {
          "name": "_doSelections",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selectionBBox"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "enable",
          "description": "Calling this method will enable this plugin",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 1
            },
            "end": {
              "line": 237,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disable",
          "description": "Calling this method will disable this plugin",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 242,
              "column": 1
            },
            "end": {
              "line": 244,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleEnable",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 246,
              "column": 4
            },
            "end": {
              "line": 251,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleDisable",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getSVGCoordinate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 4
            },
            "end": {
              "line": 270,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "svgElement"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 19,
          "column": 8
        },
        "end": {
          "line": 271,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "selectable",
          "description": "An array of shapes that can be selected by the user.\n\nThe SVG document generated will add the attached ID to the spaces.\nThis selected array must contain a value of _id that matches the\nattached ID.",
          "sourceRange": {
            "file": "triplat-graphic-selectable-behavior.js",
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 25,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "TriplatGraphicSelectableBehavior"
        },
        {
          "name": "graphic",
          "description": "The graphic on which the shapes will be highlighted.\n\nUsually, this is automatically set by triplat-graphic",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 2
            },
            "end": {
              "line": 41,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "selected",
          "description": "This will give access to an array of selected records.",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 50,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "enabled",
          "description": "A flag to enable this plugin. If this is ommitted it will be\ntrue and the plugin will be enabled.",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "selected-changed",
          "description": "Fired when the `selected` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "enabled-changed",
          "description": "Fired when the `enabled` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-graphic-bounding-selection"
    },
    {
      "description": "A plugin to enable the controlling of layers at runtime. It provides a list of available layers as well as optional properties to disable or enable layers before the rendering phase.\n\nThis plugin should be used as an inner element of triplat-graphic. Example:\n\n\t<triplat-graphic record-id=\"[[floorId]]\">\n\t  <triplat-graphic-layer-manager layers=\"{{layers}}\"\n\t\tturn-on=\"{{layersToTurnOn}}\" turn-off=\"{{layersToTurnOff}}\"\n\t\tslot=\"graphic-layer-manager\">\n\t  </triplat-graphic-layer-manager>\n\t</triplat-graphic>\n\nThe **turn-on** and **turn-off** properties are optional. If they are defined, the plugin will turn on/off the layers when rendering the graphic in addition to the ones that are already set to be visible or not. So, a developer should use these properties when there is a need for changing the layer visibility at runtime.\n\nThe **layers** property provides the ability to retrieve all layers for a graphic. Each element of this list follows the pattern: \n\n\t{ name: layerName, visible: true/false }\n\nThis way, a developer is able to create his own UI for a layer manager. For example, in order to build a very simple UI:\n\n\n\t<template is=\"dom-repeat\" items=\"{{layers}}\">\n\t  <paper-checkbox checked=\"{{item.visible}}\" \n\t\ton-change=\"_changeModel\"> {{item.name}} </paper-checkbox>\n\t</template>\n\nA **_changeModel** function can be implemented as follows:\n\n\t _changeModel: function(e){\n\t   var checked = e.target.checked;\n\t   e.model.set(\"item.visible\", checked);\n\t}",
      "summary": "",
      "path": "triplat-graphic-layer-manager.js",
      "properties": [
        {
          "name": "graphic",
          "type": "Object | null | undefined",
          "description": "The graphic on which the layers will be excluded.\n\nTypically, this is automatically set by triplat-graphic.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "layers",
          "type": "Object | null | undefined",
          "description": "Object containing a list of available layers for\nthe current drawing. Each element has information\nabout the layer name and its visibility.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 2
            },
            "end": {
              "line": 77,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "turnOn",
          "type": "Object | null | undefined",
          "description": "Optional object that contains the layer names to be turned on\nwhen rendering the graphic. It can be either an array of\nlayer names or a single string.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "turnOff",
          "type": "Object | null | undefined",
          "description": "Optional object that contains the layer names to be turned off\nwhen rendering the graphic. It can be either an array of\nlayer names or a single string.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 2
            },
            "end": {
              "line": 97,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_svgLoaded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 103,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_layersLoaded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 2
            },
            "end": {
              "line": 109,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "_initializeGraphic",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "graphic"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleSvgLoadedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_mapLayers",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 140,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svgLoaded"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleGetLayerResponse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleLayers",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleGetLayerSVGResponse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 4
            },
            "end": {
              "line": 176,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_turnOffChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 4
            },
            "end": {
              "line": 188,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "layersLoaded"
            },
            {
              "name": "change"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_turnOnChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 200,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "layersLoaded"
            },
            {
              "name": "change"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleVisibilityArrayChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 4
            },
            "end": {
              "line": 224,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            },
            {
              "name": "visible"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_toggleLayer",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 240,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "layerName"
            },
            {
              "name": "visible"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 45,
          "column": 8
        },
        "end": {
          "line": 241,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "graphic",
          "description": "The graphic on which the layers will be excluded.\n\nTypically, this is automatically set by triplat-graphic.",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "layers",
          "description": "Object containing a list of available layers for\nthe current drawing. Each element has information\nabout the layer name and its visibility.",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 2
            },
            "end": {
              "line": 77,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "turn-on",
          "description": "Optional object that contains the layer names to be turned on\nwhen rendering the graphic. It can be either an array of\nlayer names or a single string.",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "turn-off",
          "description": "Optional object that contains the layer names to be turned off\nwhen rendering the graphic. It can be either an array of\nlayer names or a single string.",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 2
            },
            "end": {
              "line": 97,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "layers-changed",
          "description": "Fired when the `layers` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "turn-on-changed",
          "description": "Fired when the `turnOn` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "turn-off-changed",
          "description": "Fired when the `turnOff` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-graphic-layer-manager"
    },
    {
      "description": "A triplat-graphic plugin for adding a defs element to the graphic SVG.  This is most usefull for \nadding hatch styling to the shapes of the drawing.\n\nExample:\n\t \n\t <triplat-graphic id=\"graphic\" \n\t\t\t   record-id=\"{{floorId}}\" \n\t\t\t   svg-loaded=\"{{loaded}}\" \n\t\t\t   has-graphic=\"{{hasGraphic}}\">\n\t\t  <triplat-graphic-def slot=\"graphic-def\">\n\t\t\t   <pattern id=\"selectedPattern\" \n\t\t\t\t\t\t width=\"40\" height=\"40\" \n\t\t\t\t\t\t patternUnits=\"userSpaceOnUse\">\n\t\t\t\t\t<line x1=\"20\" y1=\"0\" x2=\"40\" y2=\"20\" \n\t\t\t\t\t\t stroke=\"#5AAAFA\" \n\t\t\t\t\t\t stroke-width=\"10\" \n\t\t\t\t\t\t stroke-linecap=\"square\"></line>\n\t\t\t\t\t<line x1=\"0\" y1=\"20\" x2=\"20\" y2=\"40\" \n\t\t\t\t\t\t stroke=\"#5AAAFA\" \n\t\t\t\t\t\t stroke-width=\"10\" \n\t\t\t\t\t\t stroke-linecap=\"square\"></line>\n\t\t\t   </pattern>\n\t\t  </triplat-graphic-def>\n\t\t  <triplat-graphic-selectable selectable=\"{{_filter(spaces, searchTerms)}}\" \n\t\t\t   selected=\"{{selectedSpace}}\">\n\t\t  </triplat-graphic-selectable>\n\t\t</triplat-graphic>\n\t \nCSS:\n\t \n\t triplat-graphic {\n\t\t  --triplat-graphic-interactive-selected: {\n\t\t\t   fill-opacity: 1;\n\t\t\t   fill: url(#selectedPattern);\n\t\t  };\n\t }",
      "summary": "",
      "path": "triplat-graphic-def.js",
      "properties": [
        {
          "name": "graphic",
          "type": "Object | null | undefined",
          "description": "The graphic on which the layers will be excluded.\n\nUsually, this is automatically set by triplat-graphic",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 69,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_onGraphicChange\"",
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_onGraphicChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "graphic"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onSvgLoaded",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_applyDefToSvg",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 48,
          "column": 8
        },
        "end": {
          "line": 97,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "graphic",
          "description": "The graphic on which the layers will be excluded.\n\nUsually, this is automatically set by triplat-graphic",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 69,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-graphic-def"
    },
    {
      "description": "A plugin to enable drag-drop on a graphic. It should be used as an inner element of **triplat-graphic**.\n\n\t<triplat-graphic record-id=\"15294509\">\n\n\t  <triplat-graphic-drag-drop\n\t\t  selector=\"polyline.tri-interactive\"\n\t\t  accept-selector=\".user-class, #user-id\"\n\t\t  drop-spaces=\"{{spaces}}\"\n\t\t  spaceSelected=\"{{selectedSpaces}}\"\n\t\t  slot=\"graphic-drag-drop\">\n\t  </triplat-graphic-drag-drop>\n\n\t</triplat-graphic>\n\n### Styling\n\nStyle the drop-enter/drop-done shapes using mixins on the **triplat-graphic** element. \n\nExample:\n\t\n\t triplat-graphic {\n\t\t  --triplat-graphic-interactive-drop-enter: {\n\t\t\t   stroke: rgb(255, 165, 115);\n\t\t\t   stroke-width: 3;\n\t\t\t   stoke-endpath: square;\n\t\t\t   fill-opacity: 0;\n\t\t\t   vector-effect: non-scaling-stroke;\n\t\t  };\n\t\t  --triplat-graphic-interactive-drop-done: {\n\t\t\t   fill: rgb(255, 165, 115);\n\t\t\t   fill-opacity: 0.5;\n\t\t  };\n\t }\n\nCustom property                            | Description                                           | Default\n-------------------------------------------|-------------------------------------------------------|----------\n`--triplat-graphic-interactive-drop-enter` | Mixin for drop space that drag element has entered.   |\n\t\t\t\t\t\t\t\t\t\t   | This mixin will be clear when drag element leave      | `{}`\n`--triplat-graphic-interactive-drop-done`  | Mixin for drop space that drag element has dropped    | `{}`",
      "summary": "",
      "path": "triplat-graphic-drag-drop.js",
      "properties": [
        {
          "name": "graphic",
          "type": "Object | null | undefined",
          "description": "The graphic on which the drag & drop will apply to.\n\nUsually, this is automatically set by **triplat-graphic**.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 2
            },
            "end": {
              "line": 78,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "selector",
          "type": "string | null | undefined",
          "description": "CSS selector for the element to interact with.\nThe default value (polyline.tri-interactive) will make all spaces in the floor plan become dropzones.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 89,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateSelector\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"polyline.tri-interactive\""
        },
        {
          "name": "dropSpaces",
          "type": "Array | null | undefined",
          "description": "An array of the droppable spaces used to lookup space info when drop is successful\n\nThis data is usually from **triplat-ds** for all the spaces in the floor",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 100,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "observer": "\"_handleDropSpacesChanged\"",
              "readOnly": false,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "spaceSelected",
          "type": "Object | null | undefined",
          "description": "This property can be useds as data bridge between **triplat-graphic-drag-drop** and **triplat-graphic-select**.\nWhen a successful drop occurs, this data array will be updated with the space as selected.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": false,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "acceptSelector",
          "type": "string | null | undefined",
          "description": "CSS selector for the accept element(s).\nIf using multiple triplat-graphic and default selector with different acceptSelector values,\nonly the last one will succeed. Make sure to put all accept selectors in this property for that scenario.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateAcceptSelector\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "enabled",
          "type": "boolean | null | undefined",
          "description": "Declaratively enable/disable graphic drop interaction",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 2
            },
            "end": {
              "line": 132,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"updateEnabled\"",
              "readOnly": false,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "_svgLoaded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 138,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_dropSpaceById",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 2
            },
            "end": {
              "line": 144,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_matrix",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 2
            },
            "end": {
              "line": 149,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "_position",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "importMeta",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 331,
              "column": 1
            },
            "end": {
              "line": 331,
              "column": 73
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_initializeGraphic",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 4
            },
            "end": {
              "line": 176,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "graphic"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 4
            },
            "end": {
              "line": 179,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateAcceptSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 4
            },
            "end": {
              "line": 182,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleDropSpacesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 4
            },
            "end": {
              "line": 192,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dropSpaces"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeOffset",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ]
        },
        {
          "name": "_setupDragdrop",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 4
            },
            "end": {
              "line": 236,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svgLoaded"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleSvgLoadedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 4
            },
            "end": {
              "line": 240,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dropEnterHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 242,
              "column": 4
            },
            "end": {
              "line": 253,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dropLeaveHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 4
            },
            "end": {
              "line": 264,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dropDoneHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 266,
              "column": 4
            },
            "end": {
              "line": 291,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleCtmRefresh",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 293,
              "column": 4
            },
            "end": {
              "line": 297,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_sameCoordinate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 4
            },
            "end": {
              "line": 311,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "matrix"
            },
            {
              "name": "position"
            }
          ]
        },
        {
          "name": "updateEnabled",
          "description": "Programmatically enable/disable graphic drop interaction.\nParameter value is true to enable, false to disable",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 1
            },
            "end": {
              "line": 321,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 4
            },
            "end": {
              "line": 329,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 53,
          "column": 8
        },
        "end": {
          "line": 332,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "graphic",
          "description": "The graphic on which the drag & drop will apply to.\n\nUsually, this is automatically set by **triplat-graphic**.",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 2
            },
            "end": {
              "line": 78,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "selector",
          "description": "CSS selector for the element to interact with.\nThe default value (polyline.tri-interactive) will make all spaces in the floor plan become dropzones.",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 89,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "drop-spaces",
          "description": "An array of the droppable spaces used to lookup space info when drop is successful\n\nThis data is usually from **triplat-ds** for all the spaces in the floor",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 100,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "space-selected",
          "description": "This property can be useds as data bridge between **triplat-graphic-drag-drop** and **triplat-graphic-select**.\nWhen a successful drop occurs, this data array will be updated with the space as selected.",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "accept-selector",
          "description": "CSS selector for the accept element(s).\nIf using multiple triplat-graphic and default selector with different acceptSelector values,\nonly the last one will succeed. Make sure to put all accept selectors in this property for that scenario.",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "enabled",
          "description": "Declaratively enable/disable graphic drop interaction",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 2
            },
            "end": {
              "line": 132,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "drop",
          "description": "Fired when drag target drops into space.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "space-selected-changed",
          "description": "Fired when the `spaceSelected` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-graphic-drag-drop"
    },
    {
      "description": "A plugin to enable a highlight group on a graphic. It will be used as an inner element of triplat-graphic.\nIn the example below, we're creating a highlight group\nagainst the list of spaces called \"spacesForGrouping\". The spaces will be grouped by their \"occupancy\" status and\nwill be colored by their \"color\" property. Also, a mask opacity = 0.1 (10%) is set. The mask will affect every\nspace other than the ones under \"spacesForGrouping\". \n\nIn order to define settings for each group, we will make use of \"highlight spaces\". Each highlight-class defines\na value that the group-by property can assume as well as a CSS class that can be applied to that group. In the example\nbelow, there is a highlight class defined with value=\"occupied\". It means that every space in the\n\"spacesForGrouping\" list that has \"occupancy\" = \"occupied\" will get the CSS class number 1 applied.\n\n\t<triplat-graphic-highlight-group spaces=\"{{spacesForGrouping}}\" group-by=\"occupancy\" \n\t\tcolor-by=\"color\" mask-opacity=\"0.1\" slot=\"graphic-highlight-group\">\n\t\t\n\t\t<triplat-graphic-highlight-class value=\"occupied\" class-number=\"1\">\n\t\t</triplat-graphic-highlight-class>\n\n\t\t<triplat-graphic-highlight-class value=\"partially occupied\" class-number=\"2\">\n\t\t</triplat-graphic-highlight-class>\n\n\t\t<triplat-graphic-highlight-class value=\"vacant\" class-number=\"3\">\n\t\t</triplat-graphic-highlight-class>\n\n\t</triplat-graphic-highlight-group>\n\n\n### Styling\n\nStyle the highlight class using the --triplat-graphic-highlight-group- mixin on the triplat-graphic \nelement. The number of the variable corresponds to the property classNumber of the \ntriplat-graphic-highlight-class.  The classNumber must be between 1 and 5 inclusive.\n\nExample:\n\t\n\ttriplat-graphic { \n\t\t --triplat-graphic-highlight-group-2: {\n\t\t\t  fill: #8CD211;\n\t\t\t  fill-opacity: 1;\n\t\t };\n\t}\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--triplat-graphic-highlight-group-1` | Mixin for groups highlighted with class-number=\"1\" | `{}`\n`--triplat-graphic-highlight-group-2` | Mixin for groups highlighted with class-number=\"2\" | `{}`\n`--triplat-graphic-highlight-group-3` | Mixin for groups highlighted with class-number=\"3\" | `{}`\n`--triplat-graphic-highlight-group-4` | Mixin for groups highlighted with class-number=\"4\" | `{}`\n`--triplat-graphic-highlight-group-5` | Mixin for groups highlighted with class-number=\"5\" | `{}`",
      "summary": "",
      "path": "triplat-graphic-highlight-group.js",
      "properties": [
        {
          "name": "graphic",
          "type": "Object | null | undefined",
          "description": "The graphic on which the shapes will be highlighted.\nUsually, this is automatically set by triplat-graphic.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 2
            },
            "end": {
              "line": 81,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "spaces",
          "type": "Object | null | undefined",
          "description": "An object containing the shapes to be grouped and highlighted.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 2
            },
            "end": {
              "line": 90,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "readOnly": false,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "groupBy",
          "type": "string | null | undefined",
          "description": "The property of a space on which the groups will be created.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 95,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "colorBy",
          "type": "string | null | undefined",
          "description": "The property of a space that will provide the color value for\neach space.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 101,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "maskOpacity",
          "type": "number | null | undefined",
          "description": "The opacity value that will be applied to a mask over every\nother space other than the ones under the grouping.\nA higher value will make the spaces more visible.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0.9"
        },
        {
          "name": "legendSpaces",
          "type": "Array | null | undefined",
          "description": "Sets an array of spaces to be highlighted by this plugin. This property is supposed to receive the array of\nspaces generated by the triplat-graphic-legend component.\nThe spaces in this array are already grouped and filtered by the legend component.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "readOnly": false,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "highlightLayer",
          "type": "string | null | undefined",
          "description": "Sets the spaces layer that will be highlighted by this plugin.\nThere are two options:\n- INTERACTIVE: highlights the interactive (top) layer of the graphic.\n- ATTACHED: highlights the attached layer of the graphic. If this option is used, the\n**maskOpacity** will be applied to the whole floorplan.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 2
            },
            "end": {
              "line": 134,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_svgLoaded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 2
            },
            "end": {
              "line": 140,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_groups",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 2
            },
            "end": {
              "line": 145,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "_rectElementAppended",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 2
            },
            "end": {
              "line": 150,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "_initializeGraphic",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "graphic"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 171,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "refreshMaskElement",
          "description": "Refreshes the mask element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 1
            },
            "end": {
              "line": 176,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_isVisible",
          "description": "Check if an element is visible.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 1
            },
            "end": {
              "line": 181,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "el"
            }
          ]
        },
        {
          "name": "_setMaskElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 202,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svgLoaded"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_changeSpaces",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            },
            {
              "name": "svgLoaded"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_forceMicrosoftStyleUpdate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 4
            },
            "end": {
              "line": 249,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearAllAttachedClasses",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 4
            },
            "end": {
              "line": 255,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getGroupValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 4
            },
            "end": {
              "line": 259,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "groupValue"
            }
          ]
        },
        {
          "name": "_addClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 4
            },
            "end": {
              "line": 265,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "classNumber"
            },
            {
              "name": "defaultColor"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 4
            },
            "end": {
              "line": 269,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "classNumber"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getClassName",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 4
            },
            "end": {
              "line": 273,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "classNumber"
            }
          ]
        },
        {
          "name": "_handleSvgLoadedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 4
            },
            "end": {
              "line": 277,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_changeLegendSpaces",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 4
            },
            "end": {
              "line": 315,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            },
            {
              "name": "svgLoaded"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getSpaceElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 4
            },
            "end": {
              "line": 323,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            }
          ]
        },
        {
          "name": "_highlightLegendSpace",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 4
            },
            "end": {
              "line": 332,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "legendSpace"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getSpaceColor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 334,
              "column": 4
            },
            "end": {
              "line": 344,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "space"
            },
            {
              "name": "legendSpace"
            }
          ]
        },
        {
          "name": "_createLinearGradient",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 377,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "space"
            },
            {
              "name": "legendSpace"
            }
          ]
        },
        {
          "name": "_clearAllLegendSpaces",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 379,
              "column": 4
            },
            "end": {
              "line": 385,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeLegendSpace",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 387,
              "column": 4
            },
            "end": {
              "line": 396,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "classNumber"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 64,
          "column": 8
        },
        "end": {
          "line": 397,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "graphic",
          "description": "The graphic on which the shapes will be highlighted.\nUsually, this is automatically set by triplat-graphic.",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 2
            },
            "end": {
              "line": 81,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "spaces",
          "description": "An object containing the shapes to be grouped and highlighted.",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 2
            },
            "end": {
              "line": 90,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "group-by",
          "description": "The property of a space on which the groups will be created.",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 95,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "color-by",
          "description": "The property of a space that will provide the color value for\neach space.",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 101,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "mask-opacity",
          "description": "The opacity value that will be applied to a mask over every\nother space other than the ones under the grouping.\nA higher value will make the spaces more visible.",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "legend-spaces",
          "description": "Sets an array of spaces to be highlighted by this plugin. This property is supposed to receive the array of\nspaces generated by the triplat-graphic-legend component.\nThe spaces in this array are already grouped and filtered by the legend component.",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "highlight-layer",
          "description": "Sets the spaces layer that will be highlighted by this plugin.\nThere are two options:\n- INTERACTIVE: highlights the interactive (top) layer of the graphic.\n- ATTACHED: highlights the attached layer of the graphic. If this option is used, the\n**maskOpacity** will be applied to the whole floorplan.",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 2
            },
            "end": {
              "line": 134,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-graphic-highlight-group"
    },
    {
      "description": "A plugin to enable pins on a graphic. A pin denotes the location of an entity on a graphic by showing an icon and an optional label. An entity can be anything that is located in a space of the floor plan like a person, asset or equipment.\n\nThis plugin should be used as an inner element of triplat-graphic. Example:\n\n\t<triplat-graphic record-id=\"[[floorId]]\">\n\t  <triplat-graphic-pin\n\t\tpins=\"[[selectedPersons]]\" icon=\"ibm:pin-person\" \n\t\tpin-size=\"32\" show-label-onhover\n\t\tenabled=\"{{personsEnabled}}\" class-number=\"1\"\n\t\tslot=\"graphic-pin\">\n\t  </triplat-graphic-pin>\n\t</triplat-graphic>\n\nThe pin icon will be placed in the center of the space. If the pin has a label, it will be shown as a tooltip when you tap the pin icon or optionally when you hover your cursor over it.\n\nIf there is more than one pin in the same space, a multiple pin icon will be shown. A counter inside the multiple pin icon indicates to the user how many pins are located in the same space.\n\nThe **pins** attribute receives the pin objects to be added to the graphic. Every pin object must have the ID of the space where the pin will be placed and optionally a label for the pin and the name of the space. The triplat-graphic-pin will look for the space ID using the attribute name defined by the **recordIdAttrName** property, will look for the label using the attribute name defined by the **labelAttrName** property and will look the space name using the attribute name defined by the **spaceAttrName** property.\n\nFor example, let's say you want to show pins that denote the location of persons on a graphic. In this case you will pass to triplat-graphic-pin an array of persons objects. Each person object must have an attribute containing ID of the space, and optionally an attribute containing the label and an attribute containing the space name. For this example, each person object has a **spaceId**, **name** and **spaceName** attributes.\n\n\t<triplat-graphic-pin \n\t\tpins=\"[[selectedPersons]]\" \n\t\trecord-id-attr-name=\"spaceId\" label-attr-name=\"name\"\n\t\tspace-attr-name=\"spaceName\">\n\t</triplat-graphic-pin>\n\nOne or more **tripat-graphic-pin** elements can be defined inside a **triplat-graphic**. \n\n### Styling\n\nTo style the pin icons and tooltips, you must apply the mixins and CSS properties on the triplat-graphic \nelement.\n\nSome mixins and CSS properties must be declared with a number suffix. The number suffix corresponds to the number defined by the **classNumber** property. The **classNumber** must be between 1 and 5 inclusive.\n\nCSS example:\n\t\n\t<style>\n\t\ttriplat-graphic {\n\t\t\t--triplat-graphic-pin-color-3: #562f72;\n\t\t\t--triplat-graphic-pin-tooltip: #e4c0fe;\n\t\t\t--triplat-graphic-pin-tooltip: black;\n\t\t\t--triplat-graphic-pin-tooltip: #562f72;\n\t\t\t--triplat-graphic-pin-tooltip: {\n\t\t\t\tfont-size: 14px;\n\t\t\t\tfont-weight: 600;\n\t\t\t};\n\t\t}\n\t</style>\n\nExample:\n\t\n\t<triplat-graphic-pin \n\t\tpins=\"[[selectedPersons]]\" class-number=\"3\">\n\t</triplat-graphic-pin>\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--triplat-graphic-pin-color-(classNumber)`  | The color of the pin icon                 | `--ibm-gray-60`\n`--triplat-graphic-pin-tooltip-bg-color`     | The background color of the tooltip       | `--tri-primary-content-background-color`\n`--triplat-graphic-pin-tooltip-text-color`   | The text color of the text of the tooltip | `--ibm-gray-60`\n`--triplat-graphic-pin-tooltip-border-color` | The border color of the tooltip and the outline color of the pin when it is selected | `--tri-primary-light-color`\n`--triplat-graphic-pin-tooltip-close-button-color` | The color of the button to close the tooltip | `--ibm-gray-60`\n`--triplat-graphic-pin-tooltip-divider-line-color` | The color of the divider line between the head and the items in the tooltip | `--ibm-gray-10`\n`--triplat-graphic-pin-tooltip-container`    | Mixin applied to the tooltip container    | `{}`\n`--triplat-graphic-pin-tooltip`              | Mixin applied to the tooltip              | `{}`",
      "summary": "",
      "path": "triplat-graphic-pin.js",
      "properties": [
        {
          "name": "graphic",
          "type": "Object | null | undefined",
          "description": "The graphic on which the pins will be added.\nUsually, this is automatically set by triplat-graphic.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 2
            },
            "end": {
              "line": 100,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "pins",
          "type": "Object | null | undefined",
          "description": "An object containing the pins to be added to the graphic.\nIt can be either an array or a single element.\nEvery pin object must have the ID of the space where the pin will be placed and optionally a label for the pin.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "readOnly": false,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "recordIdAttrName",
          "type": "string | null | undefined",
          "description": "The name of the pin object attribute that contains the ID of the space where the pin will be placed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 2
            },
            "end": {
              "line": 119,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"_id\""
        },
        {
          "name": "labelAttrName",
          "type": "string | null | undefined",
          "description": "The name of the pin object attribute that contains the label for the pin.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"label\""
        },
        {
          "name": "spaceAttrName",
          "type": "string | null | undefined",
          "description": "The name of the pin object attribute that contains the name of the space where the pin will be placed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 2
            },
            "end": {
              "line": 135,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"space\""
        },
        {
          "name": "pinSize",
          "type": "number | null | undefined",
          "description": "The size in pixels of the pin icon.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "32"
        },
        {
          "name": "icon",
          "type": "string | null | undefined",
          "description": "The name of the icon to use. The name should have the format: iconset_name:icon_name.\nThe iconset_name: can be omitted for the IBM icon set.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 2
            },
            "end": {
              "line": 153,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_iconChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"ibm:pin-multiples\""
        },
        {
          "name": "enabled",
          "type": "boolean | null | undefined",
          "description": "A flag to enable this plugin. If this is omitted, then it will be\ntrue and the plugin will be enabled.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 2
            },
            "end": {
              "line": 164,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": false,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "preservePinSizeRatio",
          "type": "boolean | null | undefined",
          "description": "If true, the pin size will be scaled as the whole graphic is zoomed in or out.\nOtherwise, the pin size will be fixed and it will not be changed when the graphic is zoomed in or out.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 2
            },
            "end": {
              "line": 173,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "showLabelOnhover",
          "type": "boolean | null | undefined",
          "description": "If true, the label of a pin will be shown as a tooltip when the user taps or hovers the cursor over the pin icon.\nOtherwise, the label will be shown only when the user taps the icon.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 182,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "classNumber",
          "type": "number | null | undefined",
          "description": "The number used for styling with mixins and CSS properties. It must be a number between 1 to 5 inclusive.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "observer": "\"_onClassNumberChange\"",
              "readOnly": false,
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "_svgLoaded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "multiplePin",
          "type": "boolean | null | undefined",
          "description": "If true, this **triplat-graphic-pin** will be used only for configuring the multiple pin and\nthe following attributes will be ignored:\n- **enabled**\n- **labelAttrName**\n- **spaceAttrName**\n- **pins**\n- **recordIdAttrName**\n\nThe multiple pin is shown when there is more than one pin in the same space. Inside the multiple pin there is a\ncounter indicating the number of pins located in that space.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 2
            },
            "end": {
              "line": 216,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "selected",
          "type": "Object | null | undefined",
          "description": "Gets or sets the selected pin. The selected pin shows the tooltip in the graphic.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 2
            },
            "end": {
              "line": 224,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_DEFAULT_ICONSET",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 227,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_initializeGraphic",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 4
            },
            "end": {
              "line": 254,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "graphic"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleSvgLoadedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_iconChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 4
            },
            "end": {
              "line": 264,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "icon"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onClassNumberChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 266,
              "column": 4
            },
            "end": {
              "line": 270,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "classNumber"
            },
            {
              "name": "oldClassNumber"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handlePinsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pins"
            },
            {
              "name": "svgLoaded"
            },
            {
              "name": "enabled"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleSelectedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 308,
              "column": 4
            },
            "end": {
              "line": 340,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected"
            },
            {
              "name": "svgLoaded"
            },
            {
              "name": "enabled"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handlePinSelectedChangeEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 342,
              "column": 4
            },
            "end": {
              "line": 356,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addPin",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 358,
              "column": 4
            },
            "end": {
              "line": 364,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pin"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addAllPins",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 4
            },
            "end": {
              "line": 374,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pins"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createInternalPin",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 376,
              "column": 4
            },
            "end": {
              "line": 400,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pin"
            }
          ]
        },
        {
          "name": "_clearAllInternalPins",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 402,
              "column": 4
            },
            "end": {
              "line": 404,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/triplat-graphic-pin-demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 83,
          "column": 8
        },
        "end": {
          "line": 405,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "graphic",
          "description": "The graphic on which the pins will be added.\nUsually, this is automatically set by triplat-graphic.",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 2
            },
            "end": {
              "line": 100,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "pins",
          "description": "An object containing the pins to be added to the graphic.\nIt can be either an array or a single element.\nEvery pin object must have the ID of the space where the pin will be placed and optionally a label for the pin.",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "record-id-attr-name",
          "description": "The name of the pin object attribute that contains the ID of the space where the pin will be placed.",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 2
            },
            "end": {
              "line": 119,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "label-attr-name",
          "description": "The name of the pin object attribute that contains the label for the pin.",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "space-attr-name",
          "description": "The name of the pin object attribute that contains the name of the space where the pin will be placed.",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 2
            },
            "end": {
              "line": 135,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "pin-size",
          "description": "The size in pixels of the pin icon.",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "icon",
          "description": "The name of the icon to use. The name should have the format: iconset_name:icon_name.\nThe iconset_name: can be omitted for the IBM icon set.",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 2
            },
            "end": {
              "line": 153,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "enabled",
          "description": "A flag to enable this plugin. If this is omitted, then it will be\ntrue and the plugin will be enabled.",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 2
            },
            "end": {
              "line": 164,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "preserve-pin-size-ratio",
          "description": "If true, the pin size will be scaled as the whole graphic is zoomed in or out.\nOtherwise, the pin size will be fixed and it will not be changed when the graphic is zoomed in or out.",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 2
            },
            "end": {
              "line": 173,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "show-label-onhover",
          "description": "If true, the label of a pin will be shown as a tooltip when the user taps or hovers the cursor over the pin icon.\nOtherwise, the label will be shown only when the user taps the icon.",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 182,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "class-number",
          "description": "The number used for styling with mixins and CSS properties. It must be a number between 1 to 5 inclusive.",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "multiple-pin",
          "description": "If true, this **triplat-graphic-pin** will be used only for configuring the multiple pin and\nthe following attributes will be ignored:\n- **enabled**\n- **labelAttrName**\n- **spaceAttrName**\n- **pins**\n- **recordIdAttrName**\n\nThe multiple pin is shown when there is more than one pin in the same space. Inside the multiple pin there is a\ncounter indicating the number of pins located in that space.",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 2
            },
            "end": {
              "line": 216,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "selected",
          "description": "Gets or sets the selected pin. The selected pin shows the tooltip in the graphic.",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 2
            },
            "end": {
              "line": 224,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "enabled-changed",
          "description": "Fired when the `enabled` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-changed",
          "description": "Fired when the `selected` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-graphic-pin"
    },
    {
      "description": "A component that renders an SVG floor plan. You can specify either the drawing ID to be\nrendered or a record ID that the drawing is attached to. An example of the record ID\nwould be the spec ID of the floor record, where the floor plan you want to render is the\nfloor plan for that floor.\n\n\t <triplat-graphic drawing-id=\"1026\"></triplat-graphic>\n\nor\n\n\t <triplat-graphic record-id=\"15294509\"></triplat-graphic>\n\nThe graphic will scale to fit the size of the component (without stretching or\nscrolling). So the user of this component should have a width and height set. This can be set\neither explicitly or using layout css styles.",
      "summary": "",
      "path": "triplat-graphic.js",
      "properties": [
        {
          "name": "svgLoaded",
          "type": "boolean | null | undefined",
          "description": "A flag that indicates if the graphic is loaded.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 2
            },
            "end": {
              "line": 125,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "hasGraphic",
          "type": "boolean | null | undefined",
          "description": "A flag that indicates whether or not a graphic\nhas been found for the related record.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 2
            },
            "end": {
              "line": 134,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "drawingIdLoading",
          "type": "boolean | null | undefined",
          "description": "A flag that indicates if the component is currently making a request\nto the server to get the drawing ID.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "A flag that indicates if the component is currently making a request\nto the server to get the graphic.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 2
            },
            "end": {
              "line": 152,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "svgAriaLabel",
          "type": "string | null | undefined",
          "description": "Aria-label value for the svg.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 2
            },
            "end": {
              "line": 160,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "_graphic",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 166,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_singlePlugins",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 2
            },
            "end": {
              "line": 178,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[\"triplat-graphic-selectable\",\"triplat-graphic-zoomable\",\"triplat-graphic-label\",\"triplat-graphic-bounding-selection\",\"triplat-graphic-layer-manager\",\"triplat-graphic-highlight-group\"]"
        },
        {
          "name": "_graphic_label",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 2
            },
            "end": {
              "line": 184,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "defaultValue": "null"
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 4
            },
            "end": {
              "line": 226,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleSvgLoadedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "refreshViewBox",
          "description": "Recalculates the view box of the graphic.\nIf triplat-graphic-highlight-group is used, it will refresh the mask element.\nIf triplat-graphic-zoomable plugin and cached property are used, it will set to cached view box.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 1
            },
            "end": {
              "line": 251,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "refreshLabel",
          "description": "Forces the refresh of labels in the graphic.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 256,
              "column": 1
            },
            "end": {
              "line": 261,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "delay"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_findPlugin",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 4
            },
            "end": {
              "line": 266,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "plugin"
            }
          ]
        },
        {
          "name": "_lazyLoading",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 268,
              "column": 4
            },
            "end": {
              "line": 282,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleTap",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 284,
              "column": 1
            },
            "end": {
              "line": 290,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 37,
          "column": 8
        },
        "end": {
          "line": 291,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg-loaded",
          "description": "A flag that indicates if the graphic is loaded.",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 2
            },
            "end": {
              "line": 125,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "has-graphic",
          "description": "A flag that indicates whether or not a graphic\nhas been found for the related record.",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 2
            },
            "end": {
              "line": 134,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "drawing-id-loading",
          "description": "A flag that indicates if the component is currently making a request\nto the server to get the drawing ID.",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "loading",
          "description": "A flag that indicates if the component is currently making a request\nto the server to get the graphic.",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 2
            },
            "end": {
              "line": 152,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "svg-aria-label",
          "description": "Aria-label value for the svg.",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 2
            },
            "end": {
              "line": 160,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-loaded-changed",
          "description": "Fired when the `svgLoaded` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "has-graphic-changed",
          "description": "Fired when the `hasGraphic` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "drawing-id-loading-changed",
          "description": "Fired when the `drawingIdLoading` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "loading-changed",
          "description": "Fired when the `loading` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-graphic"
    }
  ]
 }
