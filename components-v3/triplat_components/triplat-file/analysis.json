{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "A custom element for displaying and editing a field type of binary.\n\nA binary field contains a reference to the file, instead of having the file itself. It is represented by a JavaScript object that contains two properties:\n - **contentID**: A reference to the file stored in the TRIRIGA Content Manager.\n - **fileName**: The name of the file.\n\nThis element should be bound to a data source field that has the data type of **Binary** in the Model Designer. When a binary field is edited, the changes will only be persisted when the record is saved using the data source.\n\t\n\t <triplat-file value=\"{{record.binaryField}}\">\n\t </triplat-file>\n\n### Adding a label\n\nThe label must be defined as an inner element of **triplat-file**. In order for an element to be considered as a label, it must have the **label** attribute. \n\nExample of a simple label:\n\n\t<triplat-file value=\"{{record.binaryField}}\">\n\t\t<span label>Binary field</span>\n\t</triplat-file>\n\nExample of a label with an icon:\n\n\t<triplat-file value=\"{{record.binaryField}}\">\n\t\t<div label>\n\t\t\t<triplat-icon icon=\"file\"></triplat-icon>\n\t\t\t<span>Binary field</span>\n\t\t</div>\n\t</triplat-file>\n\n### Enabling triplat-file for download\n\nThis element has two options for downloading the file from a binary field. One way is to show a button next to the filename, and the other is to define the filename as a link.\n\nExample of using a download button:\n\n\t<triplat-file value=\"{{record.binaryField}}\" show-download-button>\n\t\t<div label>\n\t\t\t<triplat-icon icon=\"file\"></triplat-icon>\n\t\t\t<span>Binary field</span>\n\t\t</div>\n\t</triplat-file>\n\nExample of using the filename as a link:\n\n\t<triplat-file value=\"{{record.binaryField}}\" show-download-link>\n\t\t<div label>\n\t\t\t<triplat-icon icon=\"file\"></triplat-icon>\n\t\t\t<span>Binary field</span>\n\t\t</div>\n\t</triplat-file>\n\n### Editing a binary field\n\nThere are three actions for editing a binary field:\n - One **upload button** that enables the user to search and select a file for uploading.\n - One **drop area** that enables the user to drag and drop a file for uploading.\n - One **clear button** that enables the user to clear the binary field.\n\nExample of enabling the ability to edit a binary field using an upload button:\n\n\t<triplat-file value=\"{{record.binaryField}}\" show-download-button \n\t\tshow-clear-button show-upload-button>\n\t\t<div label>\n\t\t\t<triplat-icon icon=\"file\"></triplat-icon>\n\t\t\t<span>Binary field</span>\n\t\t</div>\n\t</triplat-file>\n\nExample of enabling the ability to edit a binary field using a drop area:\n\n\t<triplat-file value=\"{{record.binaryField}}\" show-download-button \n\t\tshow-clear-button show-drop-area>\n\t\t<div label>\n\t\t\t<triplat-icon icon=\"file\"></triplat-icon>\n\t\t\t<span>Binary field</span>\n\t\t</div>\n\t</triplat-file>\n\n### Showing notifications\n\nThe **triplat-file** can be configured to notify the user of the uploading progress and to display the error when the upload fails. The notifications are displayed on top of the triplat-file.\n\nExample:\n\n\t<triplat-file value=\"{{record.binaryField}}\" show-download-button \n\t\tshow-clear-button show-drop-area show-upload-progress-bar show-upload-error>\n\t\t<div label>\n\t\t\t<triplat-icon icon=\"file\"></triplat-icon>\n\t\t\t<span>Binary field</span>\n\t\t</div>\n\t</triplat-file>\n\n### Styling\n\nCustom property                                 | Description                                              | Default\n------------------------------------------------|----------------------------------------------------------|--------------------------------------\n`--triplat-file-drop-area`                      | Mixin applied to the drop area                           | {}\n`--triplat-file-hover-drop-area`                | Mixin applied to the drop area while dragging a file over it | {}\n`--triplat-file-drop-area-text`                 | Mixin applied to the drop area text                      | {}\n`--triplat-file-input`                          | Mixin applied to the input element                       | {}\n`--triplat-file-input-container`                | Mixin applied to the input container                     | {}\n`--triplat-file-download-link-color`            | The color of the download link                           | --tri-link-color\n`--triplat-file-download-link`                  | Mixin applied to the download link                       | {}\n`--triplat-file-button`                         | Mixin applied to the icon buttons                        | {}\n`--triplat-file-notification-icon`              | Mixin applied to the icon of a notification              | {}\n`--triplat-file-error-notification`             | Mixin applied to the error notification                  | {}\n`--triplat-file-error-notification-background-color` | The background color of the error notification      | #fad2d6\n`--triplat-file-error-notification-color`       | The color of the error notification                      | ---tri-primary-color\n`--triplat-file-error-notification-icon-container` | Mixin applied to the icon container of the error notification | {}\n`--triplat-file-error-notification-message-container` | Mixin applied to the message container of the error notification | {}\n`--triplat-file-error-notification-title`       | Mixin applied to the title of the error notification     | {}\n`--triplat-file-progress-notification`          | Mixin applied to the upload progress notification        | {}\n`--triplat-file-progress-notification-icon-container` | Mixin applied to the icon container of the upload progress notification | {}\n`--triplat-file-progress-container`             | Mixin applied to the upload progress container           | {}\n`--triplat-file-progress-bar-container`         | Mixin applied to the upload progress bar container       | {}\n`--triplat-file-progress-notification-background-color` | The background color of the upload progress notification  | #deeefe\n`--triplat-file-progress-notification-color`    | The color of the upload progress notification            | --tri-primary-content-color\n`--triplat-file-progress-bar-active-color`      | The color of the upload progress bar                     | --tri-primary-color",
      "summary": "",
      "path": "triplat-file.js",
      "properties": [
        {
          "name": "_maximumFileSizeForUpload",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-file-size-validation-behavior.js",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 22,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "TriplatFileSizeValidationBehavior"
        },
        {
          "name": "value",
          "type": "Object | null | undefined",
          "description": "An object representing the binary field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 2
            },
            "end": {
              "line": 402,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_handleValueChange\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "alwaysFloatLabel",
          "type": "boolean | null | undefined",
          "description": "Set to true to always float the floating label.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 407,
              "column": 2
            },
            "end": {
              "line": 410,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "noLabelFloat",
          "type": "boolean | null | undefined",
          "description": "Set to true to disable the floating label. The label disappears when the input value is\nnot null.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 416,
              "column": 2
            },
            "end": {
              "line": 419,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "dropText",
          "type": "string | null | undefined",
          "description": "The text to display in the drop area.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 424,
              "column": 2
            },
            "end": {
              "line": 427,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "ariaLabel",
          "type": "string | null | undefined",
          "description": "The ARIA label for this file input.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 432,
              "column": 2
            },
            "end": {
              "line": 434,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "placeholder",
          "type": "string | null | undefined",
          "description": "A placeholder string in addition to the label. If this is set, the label will always float.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 439,
              "column": 2
            },
            "end": {
              "line": 442,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "showDownloadButton",
          "type": "boolean | null | undefined",
          "description": "If true, this element shows a button to download the file.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 447,
              "column": 2
            },
            "end": {
              "line": 450,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "showDropArea",
          "type": "boolean | null | undefined",
          "description": "If true, this element shows a visual area where the user can drop a file.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 455,
              "column": 2
            },
            "end": {
              "line": 458,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "showDownloadLink",
          "type": "boolean | null | undefined",
          "description": "If true, this element shows a link to download the file.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 463,
              "column": 2
            },
            "end": {
              "line": 466,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "showUploadButton",
          "type": "boolean | null | undefined",
          "description": "If true, this element shows a button to upload a new file.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 474,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "showClearButton",
          "type": "boolean | null | undefined",
          "description": "If true, this element shows a button to clear this field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 479,
              "column": 2
            },
            "end": {
              "line": 482,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "showUploadProgressBar",
          "type": "boolean | null | undefined",
          "description": "If true, this element displays a progress bar while it is uploading a file.\nIt gives users a quick sense of how much longer the upload operation will take.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 488,
              "column": 2
            },
            "end": {
              "line": 491,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "uploading",
          "type": "boolean | null | undefined",
          "description": "It indicates if uploading is in progress.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 496,
              "column": 2
            },
            "end": {
              "line": 501,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "uploadProgress",
          "type": "number | null | undefined",
          "description": "It is a number that represents the current progress of uploading a file. It has a value between 0 and 100.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 506,
              "column": 2
            },
            "end": {
              "line": 511,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "showUploadError",
          "type": "boolean | null | undefined",
          "description": "If true, this element will show an error notification when the upload of a file fails.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 516,
              "column": 2
            },
            "end": {
              "line": 519,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "errored",
          "type": "boolean | null | undefined",
          "description": "Becomes true when the upload of a file fails.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 524,
              "column": 2
            },
            "end": {
              "line": 529,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "error",
          "type": "Object | null | undefined",
          "description": "An object that contains the error key and message.\nUse the error key to create custom error messages. The available error keys are:\n- UploadFileInvalidExtension - Selected file has an extension that is not allowed (as defined in the TRIRIGAWEB.properties file).\n- UploadFileAntiVirusScanFailed - Selected file failed to pass the antivirus scan.\n- UploadAborted - If the user aborted the current upload.\n- UploadFileSizeFailed - Selecte file size exceeds the maximum allowed (as defined in the TRIRIGAWEB.properties file).\n- UploadFileError - The upload of the file failed for any other reason.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 540,
              "column": 2
            },
            "end": {
              "line": 544,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "errorNotificationDuration",
          "type": "number | null | undefined",
          "description": "The duration in milliseconds to show the error notification.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 549,
              "column": 2
            },
            "end": {
              "line": 552,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "3000"
        },
        {
          "name": "uploadIcon",
          "type": "string | null | undefined",
          "description": "The name of the icon to use for the upload button.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 557,
              "column": 2
            },
            "end": {
              "line": 560,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"ibm:upload-export\""
        },
        {
          "name": "downloadIcon",
          "type": "string | null | undefined",
          "description": "The name of the icon to use for the download button.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 565,
              "column": 2
            },
            "end": {
              "line": 568,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"ibm:download-import\""
        },
        {
          "name": "clearIcon",
          "type": "string | null | undefined",
          "description": "The name of the icon to use for the clear button.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 573,
              "column": 2
            },
            "end": {
              "line": 576,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"ibm:close-cancel-error\""
        },
        {
          "name": "abortUploadIcon",
          "type": "string | null | undefined",
          "description": "The name of the icon to use for the abort button.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 581,
              "column": 2
            },
            "end": {
              "line": 584,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"ibm:close-cancel-error\""
        },
        {
          "name": "postponeUpload",
          "type": "boolean | null | undefined",
          "description": "If true, the file will be uploaded only when the record that contains the binded binary field is saved or updated.\nWhen running in offline mode, this property is ignored and the file upload is always postponed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 590,
              "column": 2
            },
            "end": {
              "line": 593,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_hasLabel",
          "type": "boolean | null | undefined",
          "description": "If true, it indicates that this element has a label.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 598,
              "column": 2
            },
            "end": {
              "line": 602,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_hidden",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 964,
              "column": 4
            },
            "end": {
              "line": 966,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "checkFileSize",
          "description": "Check if the size of the file exceeds the maximum allowed by the MAXIMUM_UPLOAD_FILE_SIZE_MEGABYTES\nparameter.\nReturns resolved promise if the file size is less than or equals the maximum allowed by the\nMAXIMUM_UPLOAD_FILE_SIZE_MEGABYTES\nOtherwise returns a rejected promise.",
          "privacy": "public",
          "sourceRange": {
            "file": "triplat-file-size-validation-behavior.js",
            "start": {
              "line": 32,
              "column": 2
            },
            "end": {
              "line": 45,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "file"
            }
          ],
          "inheritedFrom": "TriplatFileSizeValidationBehavior"
        },
        {
          "name": "_doCheckFileSize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-file-size-validation-behavior.js",
            "start": {
              "line": 47,
              "column": 1
            },
            "end": {
              "line": 53,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "file"
            },
            {
              "name": "resolve"
            },
            {
              "name": "reject"
            },
            {
              "name": "maximumFileSize"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TriplatFileSizeValidationBehavior"
        },
        {
          "name": "getMaximumFileSizeForUpload",
          "description": "Returns a promise resolved to the number specified by the MAXIMUM_UPLOAD_FILE_SIZE_MEGABYTES\nparameter in the TRIRIGAWEB.properties.",
          "privacy": "public",
          "sourceRange": {
            "file": "triplat-file-size-validation-behavior.js",
            "start": {
              "line": 59,
              "column": 1
            },
            "end": {
              "line": 76,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "TriplatFileSizeValidationBehavior"
        },
        {
          "name": "_getMaximumFileSizeForUploadResponse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-file-size-validation-behavior.js",
            "start": {
              "line": 78,
              "column": 1
            },
            "end": {
              "line": 80,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request"
            }
          ],
          "inheritedFrom": "TriplatFileSizeValidationBehavior"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 609,
              "column": 4
            },
            "end": {
              "line": 622,
              "column": 4
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "downloadFile",
          "description": "Downloads the file from the binary field bound to this element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 627,
              "column": 1
            },
            "end": {
              "line": 652,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "openFileSelection",
          "description": "Shows a file selection dialog box to the user, so that the user can search and select a file to upload.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 657,
              "column": 1
            },
            "end": {
              "line": 664,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "clearField",
          "description": "Clears the value of the binary field bound to this element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 669,
              "column": 1
            },
            "end": {
              "line": 672,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "uploadFile",
          "description": "Uploads a new file to the binary field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 678,
              "column": 1
            },
            "end": {
              "line": 693,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "file",
              "type": "Object",
              "description": "A JavaScript file object representing the file to be uploaded."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_doUploadFile",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 695,
              "column": 4
            },
            "end": {
              "line": 734,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "file"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "abortUpload",
          "description": "Aborts the current upload.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 739,
              "column": 1
            },
            "end": {
              "line": 744,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_checkFileExtension",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 746,
              "column": 4
            },
            "end": {
              "line": 760,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "fileName"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearFieldTap",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 762,
              "column": 4
            },
            "end": {
              "line": 765,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_downloadFileTap",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 767,
              "column": 4
            },
            "end": {
              "line": 770,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_uploadTap",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 772,
              "column": 4
            },
            "end": {
              "line": 775,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setupDropArea",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 777,
              "column": 4
            },
            "end": {
              "line": 803,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleValidFileExtensionsResponse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 805,
              "column": 4
            },
            "end": {
              "line": 808,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeValidExtensions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 810,
              "column": 4
            },
            "end": {
              "line": 822,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "extensions"
            }
          ]
        },
        {
          "name": "_keyPressHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 824,
              "column": 4
            },
            "end": {
              "line": 834,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_fileSelected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 836,
              "column": 4
            },
            "end": {
              "line": 842,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createUploadRequestOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 844,
              "column": 4
            },
            "end": {
              "line": 857,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "file"
            }
          ]
        },
        {
          "name": "_handleUploadResponse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 859,
              "column": 4
            },
            "end": {
              "line": 867,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleUploadError",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 869,
              "column": 4
            },
            "end": {
              "line": 876,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request"
            },
            {
              "name": "error"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleUploadProgress",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 878,
              "column": 4
            },
            "end": {
              "line": 882,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "progress"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_abortUploadTap",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 884,
              "column": 4
            },
            "end": {
              "line": 886,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_showError",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 888,
              "column": 4
            },
            "end": {
              "line": 901,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            },
            {
              "name": "detail"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getFormattedErrorMessage",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 903,
              "column": 4
            },
            "end": {
              "line": 910,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            },
            {
              "name": "detail"
            }
          ]
        },
        {
          "name": "_discardRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 912,
              "column": 4
            },
            "end": {
              "line": 919,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_isDownloadEnabled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 921,
              "column": 4
            },
            "end": {
              "line": 924,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showDownloadButton"
            },
            {
              "name": "contentID"
            },
            {
              "name": "uploading"
            }
          ]
        },
        {
          "name": "_isUploadEnabled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 926,
              "column": 4
            },
            "end": {
              "line": 928,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showUploadButton"
            },
            {
              "name": "contentID"
            },
            {
              "name": "uploading"
            }
          ]
        },
        {
          "name": "_isClearEnabled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 930,
              "column": 4
            },
            "end": {
              "line": 932,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showClearButton"
            },
            {
              "name": "contentID"
            },
            {
              "name": "uploading"
            }
          ]
        },
        {
          "name": "_isDropAreaVisible",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 934,
              "column": 4
            },
            "end": {
              "line": 936,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showDropArea"
            },
            {
              "name": "contentID"
            },
            {
              "name": "uploading"
            }
          ]
        },
        {
          "name": "_handleContentIDChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 938,
              "column": 4
            },
            "end": {
              "line": 954,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "contentID"
            },
            {
              "name": "showDownloadLink"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeAlwaysFloatLabel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 956,
              "column": 4
            },
            "end": {
              "line": 962,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alwaysFloatLabel"
            },
            {
              "name": "placeholder"
            }
          ]
        },
        {
          "name": "_handleValueChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 968,
              "column": 4
            },
            "end": {
              "line": 972,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "cacheFile",
          "description": "Cache the binary field content to the local browser storage.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 978,
              "column": 1
            },
            "end": {
              "line": 981,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "An object representing the binary field to be cached. It defaults to the `value` property."
            }
          ]
        },
        {
          "name": "_doCacheFile",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 983,
              "column": 4
            },
            "end": {
              "line": 1000,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "fileDownloadUrl"
            }
          ]
        },
        {
          "name": "_computeDownloadContentUrl",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1002,
              "column": 4
            },
            "end": {
              "line": 1015,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "cache"
            }
          ]
        },
        {
          "name": "_readFileAsDataURL",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1017,
              "column": 4
            },
            "end": {
              "line": 1031,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "file"
            }
          ]
        },
        {
          "name": "_dataURLtoBlob",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1033,
              "column": 4
            },
            "end": {
              "line": 1047,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataUrl"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 147,
          "column": 8
        },
        "end": {
          "line": 1048,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "value",
          "description": "An object representing the binary field.",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 2
            },
            "end": {
              "line": 402,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "always-float-label",
          "description": "Set to true to always float the floating label.",
          "sourceRange": {
            "start": {
              "line": 407,
              "column": 2
            },
            "end": {
              "line": 410,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "no-label-float",
          "description": "Set to true to disable the floating label. The label disappears when the input value is\nnot null.",
          "sourceRange": {
            "start": {
              "line": 416,
              "column": 2
            },
            "end": {
              "line": 419,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "drop-text",
          "description": "The text to display in the drop area.",
          "sourceRange": {
            "start": {
              "line": 424,
              "column": 2
            },
            "end": {
              "line": 427,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "aria-label",
          "description": "The ARIA label for this file input.",
          "sourceRange": {
            "start": {
              "line": 432,
              "column": 2
            },
            "end": {
              "line": 434,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "placeholder",
          "description": "A placeholder string in addition to the label. If this is set, the label will always float.",
          "sourceRange": {
            "start": {
              "line": 439,
              "column": 2
            },
            "end": {
              "line": 442,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "show-download-button",
          "description": "If true, this element shows a button to download the file.",
          "sourceRange": {
            "start": {
              "line": 447,
              "column": 2
            },
            "end": {
              "line": 450,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "show-drop-area",
          "description": "If true, this element shows a visual area where the user can drop a file.",
          "sourceRange": {
            "start": {
              "line": 455,
              "column": 2
            },
            "end": {
              "line": 458,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "show-download-link",
          "description": "If true, this element shows a link to download the file.",
          "sourceRange": {
            "start": {
              "line": 463,
              "column": 2
            },
            "end": {
              "line": 466,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "show-upload-button",
          "description": "If true, this element shows a button to upload a new file.",
          "sourceRange": {
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 474,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "show-clear-button",
          "description": "If true, this element shows a button to clear this field.",
          "sourceRange": {
            "start": {
              "line": 479,
              "column": 2
            },
            "end": {
              "line": 482,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "show-upload-progress-bar",
          "description": "If true, this element displays a progress bar while it is uploading a file.\nIt gives users a quick sense of how much longer the upload operation will take.",
          "sourceRange": {
            "start": {
              "line": 488,
              "column": 2
            },
            "end": {
              "line": 491,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "uploading",
          "description": "It indicates if uploading is in progress.",
          "sourceRange": {
            "start": {
              "line": 496,
              "column": 2
            },
            "end": {
              "line": 501,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "upload-progress",
          "description": "It is a number that represents the current progress of uploading a file. It has a value between 0 and 100.",
          "sourceRange": {
            "start": {
              "line": 506,
              "column": 2
            },
            "end": {
              "line": 511,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "show-upload-error",
          "description": "If true, this element will show an error notification when the upload of a file fails.",
          "sourceRange": {
            "start": {
              "line": 516,
              "column": 2
            },
            "end": {
              "line": 519,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "errored",
          "description": "Becomes true when the upload of a file fails.",
          "sourceRange": {
            "start": {
              "line": 524,
              "column": 2
            },
            "end": {
              "line": 529,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "error",
          "description": "An object that contains the error key and message.\nUse the error key to create custom error messages. The available error keys are:\n- UploadFileInvalidExtension - Selected file has an extension that is not allowed (as defined in the TRIRIGAWEB.properties file).\n- UploadFileAntiVirusScanFailed - Selected file failed to pass the antivirus scan.\n- UploadAborted - If the user aborted the current upload.\n- UploadFileSizeFailed - Selecte file size exceeds the maximum allowed (as defined in the TRIRIGAWEB.properties file).\n- UploadFileError - The upload of the file failed for any other reason.",
          "sourceRange": {
            "start": {
              "line": 540,
              "column": 2
            },
            "end": {
              "line": 544,
              "column": 3
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "error-notification-duration",
          "description": "The duration in milliseconds to show the error notification.",
          "sourceRange": {
            "start": {
              "line": 549,
              "column": 2
            },
            "end": {
              "line": 552,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "upload-icon",
          "description": "The name of the icon to use for the upload button.",
          "sourceRange": {
            "start": {
              "line": 557,
              "column": 2
            },
            "end": {
              "line": 560,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "download-icon",
          "description": "The name of the icon to use for the download button.",
          "sourceRange": {
            "start": {
              "line": 565,
              "column": 2
            },
            "end": {
              "line": 568,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "clear-icon",
          "description": "The name of the icon to use for the clear button.",
          "sourceRange": {
            "start": {
              "line": 573,
              "column": 2
            },
            "end": {
              "line": 576,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "abort-upload-icon",
          "description": "The name of the icon to use for the abort button.",
          "sourceRange": {
            "start": {
              "line": 581,
              "column": 2
            },
            "end": {
              "line": 584,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "postpone-upload",
          "description": "If true, the file will be uploaded only when the record that contains the binded binary field is saved or updated.\nWhen running in offline mode, this property is ignored and the file upload is always postponed.",
          "sourceRange": {
            "start": {
              "line": 590,
              "column": 2
            },
            "end": {
              "line": 593,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "upload-error",
          "description": "Fired when the upload of a file fails.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "upload-succeeded",
          "description": "Fired when the upload of a file succeeds.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "uploading-changed",
          "description": "Fired when the `uploading` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "upload-progress-changed",
          "description": "Fired when the `uploadProgress` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "errored-changed",
          "description": "Fired when the `errored` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "error-changed",
          "description": "Fired when the `error` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-file"
    }
  ],
  "metadata": {
    "polymer": {
      "behaviors": [
        {
          "description": "A behavior to validate if the size of a file exceeds the maximum allowed by the\nMAXIMUM_UPLOAD_FILE_SIZE_MEGABYTES parameter in the TRIRIGAWEB.properties.",
          "summary": "",
          "path": "triplat-file-size-validation-behavior.js",
          "properties": [
            {
              "name": "_maximumFileSizeForUpload",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 22,
                  "column": 3
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            }
          ],
          "methods": [
            {
              "name": "checkFileSize",
              "description": "Check if the size of the file exceeds the maximum allowed by the MAXIMUM_UPLOAD_FILE_SIZE_MEGABYTES\nparameter.\nReturns resolved promise if the file size is less than or equals the maximum allowed by the\nMAXIMUM_UPLOAD_FILE_SIZE_MEGABYTES\nOtherwise returns a rejected promise.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 32,
                  "column": 2
                },
                "end": {
                  "line": 45,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "file"
                }
              ]
            },
            {
              "name": "_doCheckFileSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 1
                },
                "end": {
                  "line": 53,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "file"
                },
                {
                  "name": "resolve"
                },
                {
                  "name": "reject"
                },
                {
                  "name": "maximumFileSize"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "getMaximumFileSizeForUpload",
              "description": "Returns a promise resolved to the number specified by the MAXIMUM_UPLOAD_FILE_SIZE_MEGABYTES\nparameter in the TRIRIGAWEB.properties.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 1
                },
                "end": {
                  "line": 76,
                  "column": 2
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_getMaximumFileSizeForUploadResponse",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 78,
                  "column": 1
                },
                "end": {
                  "line": 80,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "request"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 13
            },
            "end": {
              "line": 81,
              "column": 1
            }
          },
          "privacy": "public",
          "name": "TriplatFileSizeValidationBehavior",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  }
}
