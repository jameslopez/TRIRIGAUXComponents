{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "triplat-number-input is a custom element for displaying formatted numbers. \n\n\t<triplat-number-input \n\t\tvalue=\"{{value}}\" \n\t\tuser=\"{{user}}\" \n\t\tuom=\"{{uom}}\" \n\t\tuom-list=\"{{uom-list}}\">\n\t</triplat-number-input>\n\n### Styling\n\n<div style=\"background-color:#FFFFCC\">\n  <div style=\"padding:20px;\">\n\t<b>Deprecated:</b> <br> \n\tCustom property `--triplat-uom-symbol-style` is deprecated. <br>\n\tCustom property `--triplat-uom-value-style` is deprecated, instead use `--triplat-uom-value`. <br>\n\tCustom property `--triplat-uom-abbr-style` is deprecated, instead use `--triplat-uom-abbr`. <br>\n  </div>\n</div>\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--triplat-uom-value` | Style for the UOM value part of the input field | `margin-top: 2.45em; font-size: medium; font-weight: lighter;`\n`--triplat-uom-abbr` | Style for the abbreviation part of the input field | `margin-top: 2.45em; font-size: medium; font-weight: lighter;`\n`--triplat-paper-input` | Style for the paper-input part of the input field | `{}`\n\n\nSee `TriPlatNumberBehavior` for more API docs.",
      "summary": "",
      "path": "triplat-number-input.js",
      "properties": [
        {
          "name": "_delimiter",
          "type": "string | null | undefined",
          "description": "Character to use as the thousands delimiter. This is derived from the user.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 3
            },
            "end": {
              "line": 211,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_decimal",
          "type": "string | null | undefined",
          "description": "Character to use as the decimal separator. This is derived from the user.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 3
            },
            "end": {
              "line": 203,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_currencySymbol",
          "type": "string | null | undefined",
          "description": "The symbol used for the currency.",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 37,
              "column": 2
            },
            "end": {
              "line": 37,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "_defaultDisplayMask",
          "type": "string | null | undefined",
          "description": "The default display mask to be used when formatting numbers without a UOM and without an explicitly specified display mask.",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 42,
              "column": 2
            },
            "end": {
              "line": 46,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "defaultValue": "\"0.####\"",
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "_isRtl",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 48,
              "column": 2
            },
            "end": {
              "line": 52,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "_validationPattern",
          "type": "string | null | undefined",
          "description": "A regular expression that will be used to validate the user input.\nIt will be create according to mask set for the input field./",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "style",
          "type": "string | null | undefined",
          "description": "Style property to be applied to this element and its children.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "class",
          "type": "string | null | undefined",
          "description": "Class property to be applied to this element and its children.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 3
            },
            "end": {
              "line": 153,
              "column": 16
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "description",
          "type": "string | null | undefined",
          "description": "Description property to be applied to aria-label for assistive tool to read out description for this icon.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 3
            },
            "end": {
              "line": 159,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "unformattedValue",
          "type": "string | null | undefined",
          "description": "Numeric value without any formatting (e.g. no thousand delimiter, no decimal separator).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 165,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "uom",
          "type": "string | null | undefined",
          "description": "Unit-of-Measure value, typically from the datasource field (e.g. \"Metric Ton CO2\", \"square feet\").",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "uomList",
          "type": "Object | null | undefined",
          "description": "Unit-of-Measure datasource which contains the value specified in uom. If the uom value is an\narea, then this should be a UOM datasource that represents Area.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 3
            },
            "end": {
              "line": 187,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "user",
          "type": "Object | null | undefined",
          "description": "User object which contains the decimal and delimiter.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 3
            },
            "end": {
              "line": 195,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "displayUom",
          "type": "boolean | null | undefined",
          "description": "Show the value of the UOM at its default location which is after the input number.\nUse 'triplat-uom' component for displaying this information in a preferred location on the page.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 3
            },
            "end": {
              "line": 221,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "displayAbbr",
          "type": "boolean | null | undefined",
          "description": "Show the abbreviation of the UOM at its default location which is after the input number.\nUse 'triplat-uom' component for displaying this information in a preferred location on the page.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 3
            },
            "end": {
              "line": 231,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "displaySymbol",
          "type": "boolean | null | undefined",
          "description": "Show the currency symbol of the UOM at its default location which is before the input number.\nUse 'triplat-uom' component for displaying this information in a preferred location on the page.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 3
            },
            "end": {
              "line": 241,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "Disable the field. The field cannot be selected nor can the value be changed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 3
            },
            "end": {
              "line": 250,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "Make the field read only. The field can be selected, but the value cannot be changed.\nTo show only the value without the input field, enable this property and don't set a label.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 3
            },
            "end": {
              "line": 260,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "label",
          "type": "string | null | undefined",
          "description": "String value to be used for the label.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 3
            },
            "end": {
              "line": 268,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "min",
          "type": "number | null | undefined",
          "description": "Optional minimum allowed for the input. If a value is smaller than minimum, the value will immediately be set to the defined min.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 273,
              "column": 3
            },
            "end": {
              "line": 275,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "max",
          "type": "number | null | undefined",
          "description": "Optional maximum allowed for the input. If a value is greater than maximum, the value will immediately be set to the defined max.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 3
            },
            "end": {
              "line": 282,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "autoValidate",
          "type": "boolean | null | undefined",
          "description": "Set to true to auto-validate the input value.\nIf a `uom` is set, the validation format will be based on the UOM. Otherwise, it will validate a regular number.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 288,
              "column": 3
            },
            "end": {
              "line": 291,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "Returns true if the value is invalid.\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically (in the component), which can negate attempts to\nmanage it manually (in the app).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 3
            },
            "end": {
              "line": 303,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "invalidInputMessage",
          "type": "string | null | undefined",
          "description": "The error message to display when the input is invalid.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 308,
              "column": 3
            },
            "end": {
              "line": 314,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "paperInputElement",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 321,
              "column": 3
            },
            "end": {
              "line": 323,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 3
            },
            "end": {
              "line": 330,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createMissingParameterErrorMsg",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 71,
              "column": 1
            },
            "end": {
              "line": 73,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "method"
            },
            {
              "name": "param"
            }
          ],
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "formatNumberWithoutUom",
          "description": "Take a number as it is stored internally and format it for display, including\nlocale-specific thousands delimiter and decimal character based on the user.",
          "privacy": "public",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 90,
              "column": 1
            },
            "end": {
              "line": 100,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "string",
              "description": "The string representation of the unformatted number (e.g. 5999.12)."
            },
            {
              "name": "user",
              "type": "object",
              "description": "The object representing the Current User. The decimal separator and\n                     thousands delimiter will be properties of this object."
            },
            {
              "name": "mask",
              "type": "object",
              "description": "(optional) The display mask which specifies the pattern, using the Java convention, e.g. ###,###.##\n                     If not specified, then ###,###.#### will be used."
            }
          ],
          "return": {
            "type": "string",
            "desc": "val The string representation of the formatted number (e.g. 5,999.12)."
          },
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "formatNumberWithUom",
          "description": "Take a number as it is stored internally and format it for display, including\nlocale specific thousands delimiter and decimal character based on the user, and currency symbol and\ndisplay mask based on the TRIRIGA unit-of-measure (UOM).",
          "privacy": "public",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 119,
              "column": 1
            },
            "end": {
              "line": 137,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "string",
              "description": "The string representation of the unformatted number (e.g. 5999.12)."
            },
            {
              "name": "uom",
              "type": "string",
              "description": "The unit-of-measure associated with this number (e.g. square-feet)."
            },
            {
              "name": "uomValues",
              "type": "array",
              "description": "An array of unit-of-measure object for a specific type (e.g. Area, Carbon Emission)."
            },
            {
              "name": "user",
              "type": "object",
              "description": "The object representing the Current User. The decimal separator and\n                     thousands delimiter will be properties of this object."
            }
          ],
          "return": {
            "type": "string",
            "desc": "val The string representation of the formatted number (e.g. 5,999.12)."
          },
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "_formatNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 139,
              "column": 1
            },
            "end": {
              "line": 195,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "decimal"
            },
            {
              "name": "delimiter"
            },
            {
              "name": "uom"
            },
            {
              "name": "uomValues"
            },
            {
              "name": "displaySymbol"
            },
            {
              "name": "mask"
            }
          ],
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "unformatNumber",
          "description": "Convert a formatted number to an unformatted number suitable for TRIRIGA and the database.\ntriplat-number-input, formatNumberWithUom, or formatNumberWithoutUom must have been used to format the number.",
          "privacy": "public",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 205,
              "column": 1
            },
            "end": {
              "line": 227,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "val",
              "type": "string",
              "description": "The string representation of the formatted number (e.g. 5,999.12)."
            }
          ],
          "return": {
            "type": "string",
            "desc": "val The string representation of the unformatted number (e.g. 5999.12)."
          },
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "_applyLocaleSeparatorsToMask",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 229,
              "column": 1
            },
            "end": {
              "line": 250,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "displayMask"
            },
            {
              "name": "uom_decimal"
            },
            {
              "name": "uom_delimiter"
            },
            {
              "name": "user_decimal"
            },
            {
              "name": "user_delimiter"
            }
          ],
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "_addEscapeChar",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 252,
              "column": 1
            },
            "end": {
              "line": 257,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "val"
            }
          ],
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "_useDelimiter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 259,
              "column": 1
            },
            "end": {
              "line": 264,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "uom"
            }
          ],
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "_formatIndianRupee",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 266,
              "column": 1
            },
            "end": {
              "line": 279,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "val"
            }
          ],
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "_computeCurrencySymbol",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 281,
              "column": 1
            },
            "end": {
              "line": 287,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "displaySymbol"
            },
            {
              "name": "uomValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "_generateMask",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 289,
              "column": 1
            },
            "end": {
              "line": 317,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimal"
            },
            {
              "name": "delimiter"
            },
            {
              "name": "uom"
            },
            {
              "name": "uomValues"
            },
            {
              "name": "mask"
            }
          ],
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "_generateValidationPattern",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "triplat-number-behavior.js",
            "start": {
              "line": 319,
              "column": 1
            },
            "end": {
              "line": 361,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "delimiter"
            },
            {
              "name": "decimal"
            },
            {
              "name": "uom"
            },
            {
              "name": "uomValues"
            },
            {
              "name": "displaySymbol"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TriPlatNumberBehavior"
        },
        {
          "name": "_setStyle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 3
            },
            "end": {
              "line": 338,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "style"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_resetClassMap",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 340,
              "column": 3
            },
            "end": {
              "line": 344,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_cleanClassMap",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 346,
              "column": 3
            },
            "end": {
              "line": 355,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_isNewClassInMap",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 357,
              "column": 3
            },
            "end": {
              "line": 371,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newclass"
            }
          ]
        },
        {
          "name": "_setClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 3
            },
            "end": {
              "line": 398,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "myclass"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 3
            },
            "end": {
              "line": 419,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeDecimal",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 421,
              "column": 3
            },
            "end": {
              "line": 431,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeDelimiter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 433,
              "column": 3
            },
            "end": {
              "line": 443,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_readonlyNoDisabledNoLabel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 445,
              "column": 3
            },
            "end": {
              "line": 451,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "disabled"
            },
            {
              "name": "readonly"
            },
            {
              "name": "label"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 60,
          "column": 9
        },
        "end": {
          "line": 452,
          "column": 2
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "style",
          "description": "Style property to be applied to this element and its children.",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "class",
          "description": "Class property to be applied to this element and its children.",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 3
            },
            "end": {
              "line": 153,
              "column": 16
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "description",
          "description": "Description property to be applied to aria-label for assistive tool to read out description for this icon.",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 3
            },
            "end": {
              "line": 159,
              "column": 22
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "unformatted-value",
          "description": "Numeric value without any formatting (e.g. no thousand delimiter, no decimal separator).",
          "sourceRange": {
            "start": {
              "line": 165,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "uom",
          "description": "Unit-of-Measure value, typically from the datasource field (e.g. \"Metric Ton CO2\", \"square feet\").",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "uom-list",
          "description": "Unit-of-Measure datasource which contains the value specified in uom. If the uom value is an\narea, then this should be a UOM datasource that represents Area.",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 3
            },
            "end": {
              "line": 187,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "user",
          "description": "User object which contains the decimal and delimiter.",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 3
            },
            "end": {
              "line": 195,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "display-uom",
          "description": "Show the value of the UOM at its default location which is after the input number.\nUse 'triplat-uom' component for displaying this information in a preferred location on the page.",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 3
            },
            "end": {
              "line": 221,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "display-abbr",
          "description": "Show the abbreviation of the UOM at its default location which is after the input number.\nUse 'triplat-uom' component for displaying this information in a preferred location on the page.",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 3
            },
            "end": {
              "line": 231,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "display-symbol",
          "description": "Show the currency symbol of the UOM at its default location which is before the input number.\nUse 'triplat-uom' component for displaying this information in a preferred location on the page.",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 3
            },
            "end": {
              "line": 241,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "disabled",
          "description": "Disable the field. The field cannot be selected nor can the value be changed.",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 3
            },
            "end": {
              "line": 250,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "readonly",
          "description": "Make the field read only. The field can be selected, but the value cannot be changed.\nTo show only the value without the input field, enable this property and don't set a label.",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 3
            },
            "end": {
              "line": 260,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "label",
          "description": "String value to be used for the label.",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 3
            },
            "end": {
              "line": 268,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "min",
          "description": "Optional minimum allowed for the input. If a value is smaller than minimum, the value will immediately be set to the defined min.",
          "sourceRange": {
            "start": {
              "line": 273,
              "column": 3
            },
            "end": {
              "line": 275,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "max",
          "description": "Optional maximum allowed for the input. If a value is greater than maximum, the value will immediately be set to the defined max.",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 3
            },
            "end": {
              "line": 282,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "auto-validate",
          "description": "Set to true to auto-validate the input value.\nIf a `uom` is set, the validation format will be based on the UOM. Otherwise, it will validate a regular number.",
          "sourceRange": {
            "start": {
              "line": 288,
              "column": 3
            },
            "end": {
              "line": 291,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "invalid",
          "description": "Returns true if the value is invalid.\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically (in the component), which can negate attempts to\nmanage it manually (in the app).",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 3
            },
            "end": {
              "line": 303,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "invalid-input-message",
          "description": "The error message to display when the input is invalid.",
          "sourceRange": {
            "start": {
              "line": 308,
              "column": 3
            },
            "end": {
              "line": 314,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "unformatted-value-changed",
          "description": "Fired when the `unformattedValue` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "uom-changed",
          "description": "Fired when the `uom` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-number-input"
    }
  ],
  "metadata": {
    "polymer": {
      "behaviors": [
        {
          "description": "Use `TriPlatNumberBehavior` to get support for formatting numbers for display.\n\n \n<div style=\"background-color:#FFFFCC\">\n    <div style=\"padding:20px;\">\n \t\t<b>Note:</b> To use this behavior, the component extending this behavior will need to import the Javascript Number Formatter library. See `triplat-number.js` for an example.\n \t</div>\n</div>",
          "summary": "",
          "path": "triplat-number-behavior.js",
          "properties": [
            {
              "name": "_delimiter",
              "type": "string | null | undefined",
              "description": "The character used for the thousands separator/delimiter.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 27,
                  "column": 2
                },
                "end": {
                  "line": 27,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "_decimal",
              "type": "string | null | undefined",
              "description": "The character used for the decimal separator.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 32,
                  "column": 2
                },
                "end": {
                  "line": 32,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "_currencySymbol",
              "type": "string | null | undefined",
              "description": "The symbol used for the currency.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 2
                },
                "end": {
                  "line": 37,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "_defaultDisplayMask",
              "type": "string | null | undefined",
              "description": "The default display mask to be used when formatting numbers without a UOM and without an explicitly specified display mask.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 42,
                  "column": 2
                },
                "end": {
                  "line": 46,
                  "column": 3
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"0.####\""
            },
            {
              "name": "_isRtl",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 48,
                  "column": 2
                },
                "end": {
                  "line": 52,
                  "column": 3
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "_validationPattern",
              "type": "string | null | undefined",
              "description": "A regular expression that will be used to validate the user input.\nIt will be create according to mask set for the input field./",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 58,
                  "column": 2
                },
                "end": {
                  "line": 61,
                  "column": 3
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"\""
            }
          ],
          "methods": [
            {
              "name": "attached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 64,
                  "column": 1
                },
                "end": {
                  "line": 69,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_createMissingParameterErrorMsg",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 71,
                  "column": 1
                },
                "end": {
                  "line": 73,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "method"
                },
                {
                  "name": "param"
                }
              ]
            },
            {
              "name": "formatNumberWithoutUom",
              "description": "Take a number as it is stored internally and format it for display, including\nlocale-specific thousands delimiter and decimal character based on the user.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 90,
                  "column": 1
                },
                "end": {
                  "line": 100,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "string",
                  "description": "The string representation of the unformatted number (e.g. 5999.12)."
                },
                {
                  "name": "user",
                  "type": "object",
                  "description": "The object representing the Current User. The decimal separator and\n                     thousands delimiter will be properties of this object."
                },
                {
                  "name": "mask",
                  "type": "object",
                  "description": "(optional) The display mask which specifies the pattern, using the Java convention, e.g. ###,###.##\n                     If not specified, then ###,###.#### will be used."
                }
              ],
              "return": {
                "type": "string",
                "desc": "val The string representation of the formatted number (e.g. 5,999.12)."
              }
            },
            {
              "name": "formatNumberWithUom",
              "description": "Take a number as it is stored internally and format it for display, including\nlocale specific thousands delimiter and decimal character based on the user, and currency symbol and\ndisplay mask based on the TRIRIGA unit-of-measure (UOM).",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 119,
                  "column": 1
                },
                "end": {
                  "line": 137,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "string",
                  "description": "The string representation of the unformatted number (e.g. 5999.12)."
                },
                {
                  "name": "uom",
                  "type": "string",
                  "description": "The unit-of-measure associated with this number (e.g. square-feet)."
                },
                {
                  "name": "uomValues",
                  "type": "array",
                  "description": "An array of unit-of-measure object for a specific type (e.g. Area, Carbon Emission)."
                },
                {
                  "name": "user",
                  "type": "object",
                  "description": "The object representing the Current User. The decimal separator and\n                     thousands delimiter will be properties of this object."
                }
              ],
              "return": {
                "type": "string",
                "desc": "val The string representation of the formatted number (e.g. 5,999.12)."
              }
            },
            {
              "name": "_formatNumber",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 139,
                  "column": 1
                },
                "end": {
                  "line": 195,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "decimal"
                },
                {
                  "name": "delimiter"
                },
                {
                  "name": "uom"
                },
                {
                  "name": "uomValues"
                },
                {
                  "name": "displaySymbol"
                },
                {
                  "name": "mask"
                }
              ]
            },
            {
              "name": "unformatNumber",
              "description": "Convert a formatted number to an unformatted number suitable for TRIRIGA and the database.\ntriplat-number-input, formatNumberWithUom, or formatNumberWithoutUom must have been used to format the number.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 205,
                  "column": 1
                },
                "end": {
                  "line": 227,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "val",
                  "type": "string",
                  "description": "The string representation of the formatted number (e.g. 5,999.12)."
                }
              ],
              "return": {
                "type": "string",
                "desc": "val The string representation of the unformatted number (e.g. 5999.12)."
              }
            },
            {
              "name": "_applyLocaleSeparatorsToMask",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 229,
                  "column": 1
                },
                "end": {
                  "line": 250,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "displayMask"
                },
                {
                  "name": "uom_decimal"
                },
                {
                  "name": "uom_delimiter"
                },
                {
                  "name": "user_decimal"
                },
                {
                  "name": "user_delimiter"
                }
              ]
            },
            {
              "name": "_addEscapeChar",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 252,
                  "column": 1
                },
                "end": {
                  "line": 257,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "val"
                }
              ]
            },
            {
              "name": "_useDelimiter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 259,
                  "column": 1
                },
                "end": {
                  "line": 264,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "uom"
                }
              ]
            },
            {
              "name": "_formatIndianRupee",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 266,
                  "column": 1
                },
                "end": {
                  "line": 279,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "val"
                }
              ]
            },
            {
              "name": "_computeCurrencySymbol",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 281,
                  "column": 1
                },
                "end": {
                  "line": 287,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "displaySymbol"
                },
                {
                  "name": "uomValue"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_generateMask",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 289,
                  "column": 1
                },
                "end": {
                  "line": 317,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "decimal"
                },
                {
                  "name": "delimiter"
                },
                {
                  "name": "uom"
                },
                {
                  "name": "uomValues"
                },
                {
                  "name": "mask"
                }
              ]
            },
            {
              "name": "_generateValidationPattern",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 319,
                  "column": 1
                },
                "end": {
                  "line": 361,
                  "column": 2
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "delimiter"
                },
                {
                  "name": "decimal"
                },
                {
                  "name": "uom"
                },
                {
                  "name": "uomValues"
                },
                {
                  "name": "displaySymbol"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 13
            },
            "end": {
              "line": 363,
              "column": 1
            }
          },
          "privacy": "public",
          "name": "TriPlatNumberBehavior",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  }
}
