/*
@license
IBM Confidential - OCO Source Materials - (C) COPYRIGHT IBM CORP. 2015-2018 - The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
*/
import { html } from "../@polymer/polymer/lib/utils/html-tag.js";

import { Polymer } from "../@polymer/polymer/lib/legacy/polymer-fn.js";
import "../@polymer/polymer/polymer-legacy.js";
import "./triplat-drag.js";
import "./triplat-drop.js";
import "./triplat-interact.js";

/*
> **Note: triplat-drag-drop is not a component. It is used to provide a high-level description for the triplat-drag, triplat-drop and triplat-graphic-drag-drop components.**

Drag and drop components integrate with interact.js (http://interactjs.io) to provide a drag-and-drop visual effect.

triplat-interact.html is the base component to integrate with interact.js. This javascript component provides object oriented methods and properties to be used by `triplat-drag` and `triplat-drop`.

`triplat-drag` is used to set up the drag element. It is used as a wrapper component for the drag target.

### Example of setting up a triplat-image component as drag target
	<triplat-drag selector=".user">
		<triplat-image class="user" src="{{person.picture}}" width="30px" height="40px"
		               sizing="contain" data-info$="{{person.name}}"></triplat-image>
	</triplat-drag>

See `triplat-drag` for more info.
		
`triplat-drop` is used to set up the drop zone. It is used as a wrapper component for the drop zone target(s).

### Example of setting up each space item in the list to be a drop target
	<template is="dom-repeat" items="{{allSpaces}}">
		<triplat-drop selector=".space-item" accept-selector=".user">
			<div tri-record-id$="{{item._id}}" class="space-item">
				<span class="id">
					<label>ID:</label>
					<span class="value">{{item.id}}</span>
				</span>
				<span class="id">
					<label>Name:</label>
					<span class="value">{{item.space}}</span>
				</span>
				<span class="id">
					<label>Type:</label>
					<span class="value">{{item.spaceClass}}</span>
				</span>
			</div>
		</triplat-drop>
	</template>
			
See `triplat-drop` for more info.
		
`triplat-graphic-drag-drop` uses `triplat-drop` to set up a floor graphic as the drop zone.

### Example of setting up a floor graphic as a drop-zone
	<triplat-graphic record-id="{{floorId}}">
		<triplat-graphic-selectable selectable="{{spaces}}" selected="{{selectedSpace}}">
		</triplat-graphic-selectable>
		<triplat-graphic-zoomable></triplat-graphic-zoomable>
		<triplat-graphic-highlight class-number="1" 
				highlighted="{{_filter(discrepantSpaces)}}">
		</triplat-graphic-highlight>
		<triplat-graphic-label label-id="{{spaceLabelStyleId}}"></triplat-graphic-label>
		
		<triplat-graphic-drag-drop 
				selector="polyline.tri-interactive" 
				accept-selector=".user" 
				drop-spaces="{{spaces}}">
		</triplat-graphic-drag-drop>
	</triplat-graphic>

See `triplat-graphic-drag-drop` under `triplat-graphic` for more info.
		
## Styling
		
`triplat-drag` and `triplat-graphic-drag-drop` both provide styling mixins for customization. 
See `triplat-drag` and `triplat-graphic-drag-drop` under `triplat-graphic` for more detailed information.
	
## Useful Information

1. The interact.js manages drag and drop interaction by selector map. It uses selector as key to keep track of all drag and drop targets.
When setting up multiple `triplat-drop` or `triplat-graphic-drag-drop` for multiple drag targets, do not use the same selector for different accept-selector.
Instead, put all drag target selectors together into accept-selector. For multiple `triplat-drop` or `triplat-graphic-drag-drop` with the same selector,
only the last one will be valid.
```
<triplat-drag selector="#dragItemPerson" icon="{{placeholderIcon}}">
	<div id="dragItemPerson">
		...
	</div>
</triplat-drag>
...
<triplat-drag selector=".dragItemAsset" icon="{{assetIcon}}">
	<div class="dragItemAsset">
		...
	</div>
</triplat-drag>
...
<triplat-drop selector=".space" accept-selector="#dragItemPerson,.dragItemAsset">
	...
</triplat-drop>
```
2. When dragging starts, triplat-drag will clone a iron-icon element with copied css id/class. If you need
to use attribute selector in accept-selector of triplat-drop/triplat-graphic-drag-drop, please use iron-icon type. 
In the following example, we have multiple drag targets generated by dom-repeat template. In triplat-graphic-drag-drop,
it uses attribute selector `iron-icon[id^='dip-']` to match all drag targets type as iron-icon with id starting 'dip-'.
```
<template is="dom-repeat" items="{{_computedItems(items, filters)}}">
	<triplat-drag selector="#dip-{{index}}" icon="user">
		<div id="dip-{{index}}" class="dragUser">
			...
		</div>
	</triplat-drag>
</template>
...
<triplat-graphic id="floorplan" record-id="{{recordId}}">
	...
	<triplat-graphic-drag-drop accept-selector="iron-icon[id^='dip-']" 
		drop-spaces="{{spaces}}">
	</triplat-graphic-drag-drop>
	...
</triplat-graphic>
```
3. To prevent the surrounding element text from being selected when performing a drag move, you can apply 
the following CSS class `no-user-select` to the elements to prevent them from accidentally being text-selected 
when a drag move passes by.
```
.no-user-select {
	user-select: none;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
}
```
4. The default selector value (polyline.tri-interactive) for `triplat-graphic-drag-drop` is for all the spaces
in the floor plan. If you prefer to make only selectable spaces into drop zones, then use the selector property to override the default value.
```
<triplat-graphic-drag-drop
	selector="polyline.tri-interactive.selectable"
	accept-selector="#dragItemPerson,#dragItemAsset,#dragItemEquip,#dragItemRoom"
	drop-spaces="{{_graphicSpaces}}"
	space-select="{{selectedSpace}}"
	enabled="{{_selectableEnabled}}">
</triplat-graphic-drag-drop>
```
5. For runtime enable/disable drag and drop interaction, you can use enabled property in `triplat-graphic-drag-drop` and disabled property
in `triplat-drag` and `triplat-drop`. For declarative setting, you can use data binding for disabled/enabled attribute.
```
<triplat-drag selector=".dragItem" disabled="{{!enabled}}">
	...
</triplat-drag>
...
<triplat-drop selector=".space-item" accept-selector=".dragItem" disabled="{{!enabled}}">
	...
</triplat-drop>
...
<triplat-graphic id="floorplan" record-id="{{floor.id}}">
	...
	<triplat-graphic-drag-drop accept-selector=".dragItem" enabled="{{enabled}}">
	</triplat-graphic-drag-drop>
	...
</triplat-graphic>
```
For programmatically enable/disable drag/drop operation, you can use `updateEnabled(value)` method where true for enable and false for disable.

*/
Polymer({
	is: "triplat-drag-drop"
});