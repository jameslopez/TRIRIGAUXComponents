{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "A component to be used as a wrapper to contain draggable element\n\n## Examples\n\nExample of setting up a triplat-icon as a draggable element using a CSS id, where the clone icon is a user profile icon.\n \n\t<triplat-drag selector=\"#user\" icon=\"user-profile\">\n\t  <triplat-icon id=\"user\" icon=\"user-profile\"></triplat-icon>\n\t</triplat-drag>\n\t\nExample of setting up a div element as a draggable element using a CSS class, where clone icon is search icon.\n\n\t.ironman {\n\t  width: 40px;\n\t  height; 40px;\n\t  background-image: url('iron-man.png');\n\t  background-size: cover;\n\t}\n\t\n\t<triplat-drag selector=\".ironman\" icon=\"search\">\n\t  <div class=\"ironman\"></div>\n\t</triplat-drag>\n\t\n## Styling\n\nStyle the internal div inside triplat-drag. The default style sets the width to 100%. If you need to customize the internal div style, use the --triplat-drag-internal-div mixin.\n\n### Example\n\ttriplat-drag {\n\t  --triplat-drag-internal-div: {\n\t\twidth:  50%;      // override default width\n\t\tbackground-color: yellow;\n\t  }\n\t}\n\n### Drop\n\t\nSee <b>triplat-drop</b> for setting up drop zone.\nSee <b>triplat-graphic-drag-drop</b> for setting up drop zone in triplat-graphic.",
      "summary": "",
      "path": "triplat-drag.js",
      "properties": [
        {
          "name": "selector",
          "type": "string | null | undefined",
          "description": "Required CSS selector for the element to interact as drag target. The value syntax is based on the CSS selector.\nFor example, a CSS class `user` is specified by `.user`, while a CSS id `dragme` is specified by `#dragme`.\nTag name is not supported in selector value. Only id or class syntax.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 3
            },
            "end": {
              "line": 104,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateSelector\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "Flag to enable or disable dragging.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 3
            },
            "end": {
              "line": 113,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateDisabled\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "icon",
          "type": "string | null | undefined",
          "description": "Icon used for clone. Default is user-profile.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 3
            },
            "end": {
              "line": 120,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"user-profile\""
        },
        {
          "name": "inertia",
          "type": "boolean | null | undefined",
          "description": "Flag to turn on/off drag inertia option. This is a low-level visual setting.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 3
            },
            "end": {
              "line": 129,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateInertia\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "restrictParent",
          "type": "boolean | null | undefined",
          "description": "Flag to restrict drag item to parent dimension. This is a low-level visual setting.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 3
            },
            "end": {
              "line": 138,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateRestrictParent\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "hide",
          "type": "boolean | null | undefined",
          "description": "Flag to hide light DOM. Name it different from global attribute hidden.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hide\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "noSetup",
          "type": "boolean | null | undefined",
          "description": "Flag to prevent setup in polymer attached method.\nThis is useful when planning to call setupDragging() programmatically.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 157,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateNoSetup\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "debug",
          "type": "boolean | null | undefined",
          "description": "Flag to turn on debug info.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 3
            },
            "end": {
              "line": 166,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateDebug\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_containerId",
          "type": "string | null | undefined",
          "description": "unique id (random number between 1 and 1000)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 3
            },
            "end": {
              "line": 175,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "dragIconStay",
          "type": "boolean | null | undefined",
          "description": "Flag to make icon stay after drop completion.\nThis is for debugging purposes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 3
            },
            "end": {
              "line": 184,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "showDragCursor",
          "type": "boolean | null | undefined",
          "description": "Turn on/off cursor while dragging.\nThis is for debugging purposes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 3
            },
            "end": {
              "line": 193,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_triInteract",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 3
            },
            "end": {
              "line": 198,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "_options",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 2
            },
            "end": {
              "line": 203,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "elements",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 2
            },
            "end": {
              "line": 271,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_updateSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 2
            },
            "end": {
              "line": 209,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_hide",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 2
            },
            "end": {
              "line": 213,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateDisabled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 2
            },
            "end": {
              "line": 222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updateEnabled",
          "description": "Programmatically enable/disable drag interaction.\nParameter value is true to enable, false to disable",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 2
            },
            "end": {
              "line": 233,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateInertia",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 2
            },
            "end": {
              "line": 239,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateRestrictParent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 2
            },
            "end": {
              "line": 255,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateNoSetup",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 2
            },
            "end": {
              "line": 261,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateDebug",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 2
            },
            "end": {
              "line": 267,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 273,
              "column": 2
            },
            "end": {
              "line": 275,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dragMoveListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 277,
              "column": 2
            },
            "end": {
              "line": 279,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_stringStartsWith",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 281,
              "column": 2
            },
            "end": {
              "line": 283,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "string"
            },
            {
              "name": "prefix"
            }
          ]
        },
        {
          "name": "_getOffset",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 2
            },
            "end": {
              "line": 294,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "el"
            }
          ]
        },
        {
          "name": "_setupDefaultOptions",
          "description": "TODO: support combinator selectors",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 2
            },
            "end": {
              "line": 332,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setupClone",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 334,
              "column": 2
            },
            "end": {
              "line": 350,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "clone"
            },
            {
              "name": "selector"
            },
            {
              "name": "info"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createClone",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 2
            },
            "end": {
              "line": 364,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "original"
            },
            {
              "name": "selector"
            },
            {
              "name": "parent"
            },
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_styleClone",
          "description": "style and position icon sync with cursor",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 2
            },
            "end": {
              "line": 390,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "clone"
            },
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_cloneMove",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 392,
              "column": 2
            },
            "end": {
              "line": 416,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "setupDragging",
          "description": "The element can be DOM element (object) or CSS selector (string).\nIf setup is successfully, return interactable object.\nOtherwise, return false.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 423,
              "column": 2
            },
            "end": {
              "line": 433,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elements"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 435,
              "column": 2
            },
            "end": {
              "line": 444,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 53,
          "column": 9
        },
        "end": {
          "line": 445,
          "column": 2
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "selector",
          "description": "Required CSS selector for the element to interact as drag target. The value syntax is based on the CSS selector.\nFor example, a CSS class `user` is specified by `.user`, while a CSS id `dragme` is specified by `#dragme`.\nTag name is not supported in selector value. Only id or class syntax.",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 3
            },
            "end": {
              "line": 104,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "disabled",
          "description": "Flag to enable or disable dragging.",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 3
            },
            "end": {
              "line": 113,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "icon",
          "description": "Icon used for clone. Default is user-profile.",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 3
            },
            "end": {
              "line": 120,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "inertia",
          "description": "Flag to turn on/off drag inertia option. This is a low-level visual setting.",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 3
            },
            "end": {
              "line": 129,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "restrict-parent",
          "description": "Flag to restrict drag item to parent dimension. This is a low-level visual setting.",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 3
            },
            "end": {
              "line": 138,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "hide",
          "description": "Flag to hide light DOM. Name it different from global attribute hidden.",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "no-setup",
          "description": "Flag to prevent setup in polymer attached method.\nThis is useful when planning to call setupDragging() programmatically.",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 157,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "debug",
          "description": "Flag to turn on debug info.",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 3
            },
            "end": {
              "line": 166,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "drag-icon-stay",
          "description": "Flag to make icon stay after drop completion.\nThis is for debugging purposes.",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 3
            },
            "end": {
              "line": 184,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "show-drag-cursor",
          "description": "Turn on/off cursor while dragging.\nThis is for debugging purposes.",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 3
            },
            "end": {
              "line": 193,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "drag-end",
          "description": "Fired when drag ends.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "drag-start",
          "description": "Fired when drag starts.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-drag"
    },
    {
      "description": "A component used to set up the drop zone.\n\n### Example of setting up each space item in the list to be a drop target\n\t<template is=\"dom-repeat\" items=\"{{allSpaces}}\">\n\t\t<triplat-drop selector=\".space-item\" accept-selector=\".user\">\n\t\t\t<div tri-record-id$=\"{{item._id}}\" class=\"space-item\">\n\t\t\t\t<span class=\"id\">\n\t\t\t\t\t<label>ID:</label>\n\t\t\t\t\t<span class=\"value\">{{item.id}}</span>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"id\">\n\t\t\t\t\t<label>Name:</label>\n\t\t\t\t\t<span class=\"value\">{{item.space}}</span>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"id\">\n\t\t\t\t\t<label>Type:</label>\n\t\t\t\t\t<span class=\"value\">{{item.spaceClass}}</span>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</triplat-drop>\n\t</template>",
      "summary": "",
      "path": "triplat-drop.js",
      "properties": [
        {
          "name": "selector",
          "type": "string | null | undefined",
          "description": "Required CSS selector for the element(s) to interact as drop target. The value syntax is based on the CSS selector.\nFor example, a CSS class `space-item` is specified by `.space-item`, while a CSS id `drop-zone` is specified by `#drop-zone`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 73,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateSelector\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "acceptSelector",
          "type": "string | null | undefined",
          "description": "Required CSS selector for the accept element(s). The value syntax is based on the CSS selector.\nFor example, to accept class `class-1` and id `id-2` to the drop zone, the value is `.class-1,#id-2`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 3
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateAcceptSelector\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "Flag to enable or disable dropzone.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 3
            },
            "end": {
              "line": 92,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateDisabled\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "noSetup",
          "type": "boolean | null | undefined",
          "description": "Flag to prevent setup in polymer attached method.\nThis is useful when planning to call setupDropZone() programmatically.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 102,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateNoSetup\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "debug",
          "type": "boolean | null | undefined",
          "description": "Flag to turn on debug info.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 3
            },
            "end": {
              "line": 111,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateDebug\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "inGraphic",
          "type": "boolean | null | undefined",
          "description": "It is used by triplat-graphic-drag-drop. For internal usage.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 3
            },
            "end": {
              "line": 118,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_triInteract",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "_svgContainer",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 3
            },
            "end": {
              "line": 128,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "_options",
          "type": "Object",
          "description": " options keep in local to prevent mix-up drag options",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 2
            },
            "end": {
              "line": 133,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "element",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_updateSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 2
            },
            "end": {
              "line": 145,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateNoSetup",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 2
            },
            "end": {
              "line": 151,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateDebug",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateAcceptSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 2
            },
            "end": {
              "line": 169,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateDisabled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 2
            },
            "end": {
              "line": 178,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updateEnabled",
          "description": "Programmatically enable/disable drop interaction.\nParameter value is true to enable, false to disable",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "setSvgContainer",
          "description": "This method is used by <b>triplat-graphic-drag-drop</b> to provide container info.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 2
            },
            "end": {
              "line": 195,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "container"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 203,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setupDefaultOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 2
            },
            "end": {
              "line": 273,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "setupDropZone",
          "description": "The element can be DOM element (object) or CSS selector (string).\nIf setup is successfully, return interactable object.\nOtherwise, return false.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 2
            },
            "end": {
              "line": 283,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ]
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 2
            },
            "end": {
              "line": 286,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 35,
          "column": 9
        },
        "end": {
          "line": 287,
          "column": 2
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "selector",
          "description": "Required CSS selector for the element(s) to interact as drop target. The value syntax is based on the CSS selector.\nFor example, a CSS class `space-item` is specified by `.space-item`, while a CSS id `drop-zone` is specified by `#drop-zone`.",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 73,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "accept-selector",
          "description": "Required CSS selector for the accept element(s). The value syntax is based on the CSS selector.\nFor example, to accept class `class-1` and id `id-2` to the drop zone, the value is `.class-1,#id-2`.",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 3
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "disabled",
          "description": "Flag to enable or disable dropzone.",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 3
            },
            "end": {
              "line": 92,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "no-setup",
          "description": "Flag to prevent setup in polymer attached method.\nThis is useful when planning to call setupDropZone() programmatically.",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 102,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "debug",
          "description": "Flag to turn on debug info.",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 3
            },
            "end": {
              "line": 111,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "in-graphic",
          "description": "It is used by triplat-graphic-drag-drop. For internal usage.",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 3
            },
            "end": {
              "line": 118,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "_drop",
          "description": "Fired when drag target drops into drop target. This event is different from `drop` event for triplat-graphic-drag-drop",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "drag-enter",
          "description": "Fired when drag target enters drop target.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "drag-leave",
          "description": "Fired when drag target leaves drop target.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-drop"
    },
    {
      "description": "> **Note: triplat-drag-drop is not a component. It is used to provide a high-level description for the triplat-drag, triplat-drop and triplat-graphic-drag-drop components.**\n\nDrag and drop components integrate with interact.js (http://interactjs.io) to provide a drag-and-drop visual effect.\n\ntriplat-interact.html is the base component to integrate with interact.js. This javascript component provides object oriented methods and properties to be used by `triplat-drag` and `triplat-drop`.\n\n`triplat-drag` is used to set up the drag element. It is used as a wrapper component for the drag target.\n\n### Example of setting up a triplat-image component as drag target\n\t<triplat-drag selector=\".user\">\n\t\t<triplat-image class=\"user\" src=\"{{person.picture}}\" width=\"30px\" height=\"40px\"\n\t\t               sizing=\"contain\" data-info$=\"{{person.name}}\"></triplat-image>\n\t</triplat-drag>\n\nSee `triplat-drag` for more info.\n\t\t\n`triplat-drop` is used to set up the drop zone. It is used as a wrapper component for the drop zone target(s).\n\n### Example of setting up each space item in the list to be a drop target\n\t<template is=\"dom-repeat\" items=\"{{allSpaces}}\">\n\t\t<triplat-drop selector=\".space-item\" accept-selector=\".user\">\n\t\t\t<div tri-record-id$=\"{{item._id}}\" class=\"space-item\">\n\t\t\t\t<span class=\"id\">\n\t\t\t\t\t<label>ID:</label>\n\t\t\t\t\t<span class=\"value\">{{item.id}}</span>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"id\">\n\t\t\t\t\t<label>Name:</label>\n\t\t\t\t\t<span class=\"value\">{{item.space}}</span>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"id\">\n\t\t\t\t\t<label>Type:</label>\n\t\t\t\t\t<span class=\"value\">{{item.spaceClass}}</span>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</triplat-drop>\n\t</template>\n\t\t\t\nSee `triplat-drop` for more info.\n\t\t\n`triplat-graphic-drag-drop` uses `triplat-drop` to set up a floor graphic as the drop zone.\n\n### Example of setting up a floor graphic as a drop-zone\n\t<triplat-graphic record-id=\"{{floorId}}\">\n\t\t<triplat-graphic-selectable selectable=\"{{spaces}}\" selected=\"{{selectedSpace}}\">\n\t\t</triplat-graphic-selectable>\n\t\t<triplat-graphic-zoomable></triplat-graphic-zoomable>\n\t\t<triplat-graphic-highlight class-number=\"1\" \n\t\t\t\thighlighted=\"{{_filter(discrepantSpaces)}}\">\n\t\t</triplat-graphic-highlight>\n\t\t<triplat-graphic-label label-id=\"{{spaceLabelStyleId}}\"></triplat-graphic-label>\n\t\t\n\t\t<triplat-graphic-drag-drop \n\t\t\t\tselector=\"polyline.tri-interactive\" \n\t\t\t\taccept-selector=\".user\" \n\t\t\t\tdrop-spaces=\"{{spaces}}\">\n\t\t</triplat-graphic-drag-drop>\n\t</triplat-graphic>\n\nSee `triplat-graphic-drag-drop` under `triplat-graphic` for more info.\n\t\t\n## Styling\n\t\t\n`triplat-drag` and `triplat-graphic-drag-drop` both provide styling mixins for customization. \nSee `triplat-drag` and `triplat-graphic-drag-drop` under `triplat-graphic` for more detailed information.\n\t\n## Useful Information\n\n1. The interact.js manages drag and drop interaction by selector map. It uses selector as key to keep track of all drag and drop targets.\nWhen setting up multiple `triplat-drop` or `triplat-graphic-drag-drop` for multiple drag targets, do not use the same selector for different accept-selector.\nInstead, put all drag target selectors together into accept-selector. For multiple `triplat-drop` or `triplat-graphic-drag-drop` with the same selector,\nonly the last one will be valid.\n```\n<triplat-drag selector=\"#dragItemPerson\" icon=\"{{placeholderIcon}}\">\n\t<div id=\"dragItemPerson\">\n\t\t...\n\t</div>\n</triplat-drag>\n...\n<triplat-drag selector=\".dragItemAsset\" icon=\"{{assetIcon}}\">\n\t<div class=\"dragItemAsset\">\n\t\t...\n\t</div>\n</triplat-drag>\n...\n<triplat-drop selector=\".space\" accept-selector=\"#dragItemPerson,.dragItemAsset\">\n\t...\n</triplat-drop>\n```\n2. When dragging starts, triplat-drag will clone a iron-icon element with copied css id/class. If you need\nto use attribute selector in accept-selector of triplat-drop/triplat-graphic-drag-drop, please use iron-icon type. \nIn the following example, we have multiple drag targets generated by dom-repeat template. In triplat-graphic-drag-drop,\nit uses attribute selector `iron-icon[id^='dip-']` to match all drag targets type as iron-icon with id starting 'dip-'.\n```\n<template is=\"dom-repeat\" items=\"{{_computedItems(items, filters)}}\">\n\t<triplat-drag selector=\"#dip-{{index}}\" icon=\"user\">\n\t\t<div id=\"dip-{{index}}\" class=\"dragUser\">\n\t\t\t...\n\t\t</div>\n\t</triplat-drag>\n</template>\n...\n<triplat-graphic id=\"floorplan\" record-id=\"{{recordId}}\">\n\t...\n\t<triplat-graphic-drag-drop accept-selector=\"iron-icon[id^='dip-']\" \n\t\tdrop-spaces=\"{{spaces}}\">\n\t</triplat-graphic-drag-drop>\n\t...\n</triplat-graphic>\n```\n3. To prevent the surrounding element text from being selected when performing a drag move, you can apply \nthe following CSS class `no-user-select` to the elements to prevent them from accidentally being text-selected \nwhen a drag move passes by.\n```\n.no-user-select {\n\tuser-select: none;\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\t-ms-user-select: none;\n}\n```\n4. The default selector value (polyline.tri-interactive) for `triplat-graphic-drag-drop` is for all the spaces\nin the floor plan. If you prefer to make only selectable spaces into drop zones, then use the selector property to override the default value.\n```\n<triplat-graphic-drag-drop\n\tselector=\"polyline.tri-interactive.selectable\"\n\taccept-selector=\"#dragItemPerson,#dragItemAsset,#dragItemEquip,#dragItemRoom\"\n\tdrop-spaces=\"{{_graphicSpaces}}\"\n\tspace-select=\"{{selectedSpace}}\"\n\tenabled=\"{{_selectableEnabled}}\">\n</triplat-graphic-drag-drop>\n```\n5. For runtime enable/disable drag and drop interaction, you can use enabled property in `triplat-graphic-drag-drop` and disabled property\nin `triplat-drag` and `triplat-drop`. For declarative setting, you can use data binding for disabled/enabled attribute.\n```\n<triplat-drag selector=\".dragItem\" disabled=\"{{!enabled}}\">\n\t...\n</triplat-drag>\n...\n<triplat-drop selector=\".space-item\" accept-selector=\".dragItem\" disabled=\"{{!enabled}}\">\n\t...\n</triplat-drop>\n...\n<triplat-graphic id=\"floorplan\" record-id=\"{{floor.id}}\">\n\t...\n\t<triplat-graphic-drag-drop accept-selector=\".dragItem\" enabled=\"{{enabled}}\">\n\t</triplat-graphic-drag-drop>\n\t...\n</triplat-graphic>\n```\nFor programmatically enable/disable drag/drop operation, you can use `updateEnabled(value)` method where true for enable and false for disable.",
      "summary": "",
      "path": "triplat-drag-drop.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 166,
          "column": 8
        },
        "end": {
          "line": 168,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-drag-drop"
    }
  ],
  "functions": [
    {
      "name": "TriInteract",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "triplat-interact.js",
        "start": {
          "line": 12,
          "column": 27
        },
        "end": {
          "line": 19,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [],
      "return": {
        "type": "void"
      }
    }
  ]
}
