{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "A component that provides a counter. The component includes an input box with increase and decrease icons. \nThe value can be typed directly in the input box or it can be increased and decreased by selecting the icons. The default step is 1, but this value can be configured. \nThe value must be a positive number and can be set to accept numbers within a range. \n \n<div style=\"background-color:#FFFFCC\">\n\t<div style=\"padding:20px;\">\n\t\t<b>Note:</b> The layout of the component (label, input and icons) should be defined outside of the component by custom CSS.\n\t</div>\n</div>\n\nExample of a simple counter with no maximum. \n\n\t<triplat-incremental-input \n\t  label=\"Attendance\"\n\t  increase-aria-label=\"Increase Attendance\"\n\t  decrease-aria-label=\"Decrease Attendance\"\n\t  value=\"{{data.attendance}}\"></triplat-incremental-input>\n\nExample of a counter that represents minutes, with a range of 0 to 59, and a step of 15. \nWhen the user clicks on the icons, the value is increased or decreased by 15, and loops around the range (so the icons are not disabled when reaching min or max).\nFor example, clicking on the decrease icon, the value will be changed from \"0\" to \"45\" (as if the user clicks 15 times to decrease the value with step \"1\").\n\n\t<triplat-incremental-input \n\t  label=\"Minutes\"\n\t  increase-aria-label=\"Increase Minutes\"\n\t  decrease-aria-label=\"Decrease Minutes\"\n\t  value=\"0\"\n\t  min=\"0\"\n\t  max=\"59\"\n\t  step=\"15\"\n\t  loop></triplat-incremental-input>\n\nExample of a counter with a range of 1 to 9999, flex validation, and error message. Any invalid value is not enforced. Instead, the value is marked as invalid and \nthe error message is displayed.  \n\n\t<triplat-incremental-input \n\t  class=\"attendance\"\n\t  label=\"Attendance\"\n\t  error-message=\"1 to 9999\"\n\t  flex-validation\n\t  increase-aria-label=\"Increase Attendance\"\n\t  decrease-aria-label=\"Decrease Attendance\"\n\t  value=\"{{data.attendance}}\"\n\t  min=\"1\"\n\t  max=\"9999\"></triplat-incremental-input>\n\nExample of using custom label. In order for an element to be considered as a label, it must have the `label` slot attribute.\n\n\t<triplat-incremental-input \n\t  increase-aria-label=\"Increase Seconds\"\n\t  decrease-aria-label=\"Decrease Seconds\"\n\t  value=\"0\"\n\t  min=\"0\"\n\t  max=\"60\"\n\t  step=\"10\"\n\t  loop>\n\t  <iron-icon slot=\"label\" icon=\"image:timer-10\"></iron-icon>\n\t  <span slot=\"label\">Seconds</span>\n\t</triplat-incremental-input>\n\n<div style=\"background-color:#FFFFCC\">\n\t<div style=\"padding:20px;\">\n\t\t<b>Note:</b> The `label` property value will be overridden when using a custom `label` slot. \n\t</div>\n</div>\n\nIf you want to display the component in a vertical layout, use the `--triplat-increment-input-main` mixin and apply a vertical layout. Also enable `reverse-icons` so that the icon orientation is correct.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--triplat-increment-input-main` | Mixin applied to the main div used for setting the layout of the label and the counter| `{}`\n`--triplat-increment-input-counter` | Mixin applied to the counter div used for setting the layout of the icons and input| `{}`\n`--triplat-increment-input-label` | Mixin applied to the incremental label | `{font-size: .75em; color: var(--tri-secondary-color);}`\n`--triplat-increment-input-paper` | Mixin applied to the paper input | `{text-align: center; padding-left: 4px; padding-right: 4px;}`\n`--triplat-duration-period-counter-icon` | Mixin applied to the decrease and increase icons | `{height: 44px; width: 44px; padding: 6px; color: var(--tri-primary-color); background-color: white;}`\n`--triplat-increment-input-counters-only-value` | Mixin applied to the counters only display value | `{}`",
      "summary": "",
      "path": "triplat-incremental-input.js",
      "properties": [
        {
          "name": "value",
          "type": "number | null | undefined",
          "description": "Numeric value for the incremental input field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 2
            },
            "end": {
              "line": 206,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "Indicates invalid input (when using flexValidation).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 2
            },
            "end": {
              "line": 214,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "notify": false,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "Error message to be displayed when input is invalid (not a positive number, < min, or > max).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 2
            },
            "end": {
              "line": 222,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "label",
          "type": "string | null | undefined",
          "description": "String value to be used for the incremental label.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 2
            },
            "end": {
              "line": 227,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "showLabelUnder",
          "type": "boolean | null | undefined",
          "description": "Show the label underneath the value instead of above the value. Use this only when the component is vertical.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 2
            },
            "end": {
              "line": 235,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "increaseAriaLabel",
          "type": "string | null | undefined",
          "description": "String value to be used for the ARIA label of the increase icon.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 2
            },
            "end": {
              "line": 240,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "decreaseAriaLabel",
          "type": "string | null | undefined",
          "description": "String value to be used for the ARIA label of the decrease icon.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 2
            },
            "end": {
              "line": 245,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "min",
          "type": "number | null | undefined",
          "description": "Optional minimum allowed for a value when a value is decreased. If a value is smaller than min, the value will immediately be changed to min (unless flexValidation is true).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 2
            },
            "end": {
              "line": 253,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "max",
          "type": "number | null | undefined",
          "description": "Optional maximum allowed for a value when a value is increased. If a value is greater than max, the value will immediately be changed to max (unless flexValidation is true).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 2
            },
            "end": {
              "line": 260,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "preventNegative",
          "type": "boolean | null | undefined",
          "description": "Prevent user from typing in '-'. This will be automatically set to true if minimum is set to zero or above.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 2
            },
            "end": {
              "line": 267,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "minDigits",
          "type": "number | null | undefined",
          "description": "Optional minimum number of digits when displaying a value. If a value length is smaller than the minimum digits number, preceding zeros will be added to the value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 2
            },
            "end": {
              "line": 275,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "loop",
          "type": "boolean | null | undefined",
          "description": "Optional loop when a value is increased or decreased (between min and max like a spinner wheel). Requires max value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 2
            },
            "end": {
              "line": 283,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "flexValidation",
          "type": "boolean | null | undefined",
          "description": "Optional flex validation. If this option is selected, any invalid entered value is not forced into min or max.\nInstead, the input is marked as invalid.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 2
            },
            "end": {
              "line": 292,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "reverseIcons",
          "type": "boolean | null | undefined",
          "description": "Optional reverse order of the increase and decrease icons. By default, the decrease icon displays first. Enable this property if you are planning planning to layout the icons and input vertically.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 2
            },
            "end": {
              "line": 301,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "step",
          "type": "number | null | undefined",
          "description": "Amount to add or subtract when increasing or decreasing a value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 306,
              "column": 2
            },
            "end": {
              "line": 309,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "Value to indicate that the component is read-only.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 314,
              "column": 2
            },
            "end": {
              "line": 317,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "countersOnly",
          "type": "boolean | null | undefined",
          "description": "The user can edit the values with the period counters only. The input will be read-only.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "paperInputElement",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 4
            },
            "end": {
              "line": 330,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 4
            },
            "end": {
              "line": 349,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeAllowedPattern",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 351,
              "column": 4
            },
            "end": {
              "line": 357,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "preventNegative"
            }
          ]
        },
        {
          "name": "_displayValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 366,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "minDigits"
            }
          ]
        },
        {
          "name": "increaseValue",
          "description": "Increase the value by a given step.\nIf max value is set, value cannot exceed it.\nIf loop is set and value exceeds max, then set the value to min.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 1
            },
            "end": {
              "line": 418,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "decreaseValue",
          "description": "Decrease the value by a given step.\nValue cannot be smaller than min.\nIf loop is set and value is smaller than min, then set the value to max.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 425,
              "column": 1
            },
            "end": {
              "line": 470,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_disableDecrementButton",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 472,
              "column": 4
            },
            "end": {
              "line": 483,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "loop"
            },
            {
              "name": "value"
            },
            {
              "name": "readonly"
            }
          ]
        },
        {
          "name": "_disableIncrementButton",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 485,
              "column": 4
            },
            "end": {
              "line": 496,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "loop"
            },
            {
              "name": "value"
            },
            {
              "name": "readonly"
            }
          ]
        },
        {
          "name": "_initValidation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 498,
              "column": 4
            },
            "end": {
              "line": 504,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleEdit",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 506,
              "column": 4
            },
            "end": {
              "line": 519,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleFlexValidation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 521,
              "column": 4
            },
            "end": {
              "line": 531,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleForceValidation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 533,
              "column": 4
            },
            "end": {
              "line": 551,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 553,
              "column": 4
            },
            "end": {
              "line": 583,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_isNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 585,
              "column": 4
            },
            "end": {
              "line": 588,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 102,
          "column": 8
        },
        "end": {
          "line": 589,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "value",
          "description": "Numeric value for the incremental input field.",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 2
            },
            "end": {
              "line": 206,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "invalid",
          "description": "Indicates invalid input (when using flexValidation).",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 2
            },
            "end": {
              "line": 214,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "error-message",
          "description": "Error message to be displayed when input is invalid (not a positive number, < min, or > max).",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 2
            },
            "end": {
              "line": 222,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "label",
          "description": "String value to be used for the incremental label.",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 2
            },
            "end": {
              "line": 227,
              "column": 15
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "show-label-under",
          "description": "Show the label underneath the value instead of above the value. Use this only when the component is vertical.",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 2
            },
            "end": {
              "line": 235,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "increase-aria-label",
          "description": "String value to be used for the ARIA label of the increase icon.",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 2
            },
            "end": {
              "line": 240,
              "column": 27
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "decrease-aria-label",
          "description": "String value to be used for the ARIA label of the decrease icon.",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 2
            },
            "end": {
              "line": 245,
              "column": 27
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "min",
          "description": "Optional minimum allowed for a value when a value is decreased. If a value is smaller than min, the value will immediately be changed to min (unless flexValidation is true).",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 2
            },
            "end": {
              "line": 253,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "max",
          "description": "Optional maximum allowed for a value when a value is increased. If a value is greater than max, the value will immediately be changed to max (unless flexValidation is true).",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 2
            },
            "end": {
              "line": 260,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "prevent-negative",
          "description": "Prevent user from typing in '-'. This will be automatically set to true if minimum is set to zero or above.",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 2
            },
            "end": {
              "line": 267,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "min-digits",
          "description": "Optional minimum number of digits when displaying a value. If a value length is smaller than the minimum digits number, preceding zeros will be added to the value.",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 2
            },
            "end": {
              "line": 275,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "loop",
          "description": "Optional loop when a value is increased or decreased (between min and max like a spinner wheel). Requires max value.",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 2
            },
            "end": {
              "line": 283,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "flex-validation",
          "description": "Optional flex validation. If this option is selected, any invalid entered value is not forced into min or max.\nInstead, the input is marked as invalid.",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 2
            },
            "end": {
              "line": 292,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "reverse-icons",
          "description": "Optional reverse order of the increase and decrease icons. By default, the decrease icon displays first. Enable this property if you are planning planning to layout the icons and input vertically.",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 2
            },
            "end": {
              "line": 301,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "step",
          "description": "Amount to add or subtract when increasing or decreasing a value.",
          "sourceRange": {
            "start": {
              "line": 306,
              "column": 2
            },
            "end": {
              "line": 309,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "readonly",
          "description": "Value to indicate that the component is read-only.",
          "sourceRange": {
            "start": {
              "line": 314,
              "column": 2
            },
            "end": {
              "line": 317,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "counters-only",
          "description": "The user can edit the values with the period counters only. The input will be read-only.",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "triplat-incremental-input-change-by-user",
          "description": "Fired whenever the user changes the input value, either by selecting the increase or decrease icon, or by typing in the input field.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "triplat-incremental-input"
    }
  ]
}
